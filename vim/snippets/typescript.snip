include javascript.snip

snippet lambda
options word
	(${1:args}) => {
		${0:TARGET}
	}

snippet class
	class ${1:Name} {
		${0:TARGET}
	}

snippet namespace
	namespace ${1:Name} {
		${0:TARGET}
	}

snippet abstract_class
	abstract class ${1:Name} {
		${0:TARGET}
	}

snippet enum
	enum ${1:Name} {
		${2:value1},
		${0:value2}
	}

snippet get
	get ${1:name}(): ${0:type} {
		return this._$1;
	}

snippet set
	set ${1:name}(${2:value}) {
		this._$1 = $2
	}

snippet let
	let ${1:name}

snippet interface
	interface ${1:Name} {
		${0:TARGET}
	}

snippet interface_function
	interface ${1:IName} {
		(${2:name}: ${3:type}): ${0:returnType}
	}

snippet array_interface
	interface ${1:IName} {
		[index: ${2:indexType}]: ${0:type};
	}

snippet mapped_type
	{ [${2:P} in ${1:Unioned}]: ${3:Type} }

snippet variable_interface
alias arg
options word
    ${1:name}: ${0:type}

snippet optional
options word
	${0:name}?

snippet readonly
options word
	readonly ${0} 

snippet abstract
	abstract ${0} 

snippet private
options word
	private ${0} 

snippet public
options word
	public ${0} 

snippet protected
options word
	protected ${0} 

snippet method
options word
	${1:name}(${2:args}) {
		${0:TARGET}
	}

snippet method_interface
options word
	${1:name}(${0:args})

snippet constructor_interface
	interface ${1:IName} {
		new (${0:args})
	}

snippet constructor
alias init
	constructor(${1:args}) {
		${0:TARGET}
	}

snippet implements
	implements ${0:Name} 

snippet extends
	extends ${0:Name} 

snippet public_readonly
options word
	public readonly ${0} 

snippet protected_readonly
options word
	protected readonly ${0} 

snippet private_readonly
options word
	private readonly ${0} 

snippet public_method
	public ${1:async} ${2:name}(${3:args}) {
		${0:TARGET}
	}

snippet protected_method
	protected ${1:async} ${2:name}(${3:args}) {
		${0:TARGET}
	}

snippet import
	import { ${0:name} } from "${1:file}"

snippet default_import
	import ${0:name} from "${1:file}"

snippet export
	export ${0} 

snippet thisx
	this.${1:name} = $1;

snippet new
options word
	new ${1:Class}(${0:args});

snippet super
	super(${0});

snippet type_assert
alias as
	as ${0:type}

snippet type
	type ${0:type}

snippet async
	async ${0} 

snippet await
	await ${0} 

snippet keyof
options word
	keyof ${0:type} 

snippet generics
options word
	${1:Name}<${0:T}>

snippet is_undefined
options word
	=== undefined

snippet then
	then((${1:arg}: ${2:type}) => {
		${0:TARGET}
	})

snippet guard_type
	${1:arg} is ${0:type}

snippet describe
	describe("${1:description}", () => {
		${0:TARGET}
	})

snippet it
	it("${1:description}", ${2:async} () => {
		${0:TARGET}
	})

snippet beforeEach
	beforeEach(() => {
		${0:TARGET}
	});

snippet mock
	const ${1:mock}Class = jest.fn<$1>(() => ({}));
	const ${0}$1 = new $1Class();

snippet mocktype
	let ${0:name}: jest.Mock;

snippet mockfn
	${0:name} = jest.fn()

snippet called
	expect(${0:result}).toHaveBeenCalled()

snippet expect
	expect(${1:result}).${2:toEqual}(${0:expected})

snippet throw
	throw new ${1:Name}Error("${0}");

snippet promise_type
	Promise<${0}>

snippet info
options word
	this.logger.info(${0})

snippet decorator
	@${0:Name}
