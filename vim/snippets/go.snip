
snippet main
abbr func main() {}
	func main() {
		${0}
	}

snippet function
alias func
abbr func name() (returnVar type) {}
	func ${1:name}(${2:args}) ${3:type }{
		${0:TARGET}
	}

snippet lambda
abbr func() (returnVar type) {}
	func (${1:args}) ${2:type }{
		${0:TARGET}
	}

snippet test_func
	func Test${1:Name}(t *testing.T) {
		${0:TARGET}
	}

snippet bench_func
	func Benchmark${1:Name}(b *testing.B) {
	    // setup code
	    b.ResetTimer()
	    // benchmarkFunc(b.N)
		${0:TARGET}
	}

snippet var
abbr var names type
	var ${1:names} ${0:type}

snippet var_default
abbr var names default_value
	var ${1:names} = ${0:value}

snippet struct_init
	${1:name} := ${2:structName}{${3:key}: ${0:value}}

snippet array
abbr array := [...]type{value, ...}
	[...]${1:typeName}{${0:value}}

snippet slice
abbr slice := []type{value, ...}
	[]${1:typeName}{${0:value}}

snippet map
abbr map := map[keyType]valueType{key: value, ...}
	map[${1:keyTypeName}]${2:valueTypeName}{${3:key}: ${0:name},}

snippet const
abbr const name = value
	const ${1:name} = ${0:value}

snippet return
	return ${0}

snippet package
	package ${1:main}

snippet println
	fmt.Println(${0:TARGET})

snippet sprintf
	fmt.Sprintf("${1:formatString}", ${0:args})

snippet make
	make(${0:type,})

snippet append
	$1 = append(${1:slice}, ${0:value,})

snippet delete
	delete(${1:map}, ${0:key})

snippet cast
	${1:type}(${0:value})

snippet range
	range ${0:iterable}

snippet chan
	chan ${0:type}

snippet type
	type ${0:Name}

snippet struct
	struct {
		${1:fieldName} ${0:type}
	}

snippet interface
	interface {
		${1:FuncName}() ${0:type}
	}

snippet enum
	const (
		${1:Zero}  = iota
		${0:One}
	)

snippet for
	for ${1:condition} {
		${0:TARGET}
	}

snippet for_var
	for ${1:name} := ${2:variable}; ${3:condition} {
		${0:TARGET}
	}

snippet for_index
	for ${1:i} := ${2:init}; $1 < ${3:cond}; $1++ {
		${0:TARGET}
	}

snippet ifelse
	if ${1:condition} {
		${2:TARGET}
	} else {
		${0:TARGET}
	}

snippet ifelseif
	if ${1:condition} {
		${2:TARGET}
	} else if ${3:condition} {
		${0:TARGET}
	}

snippet ifonly
	if ${1:condition} {
		${0:TARGET}
	}

snippet iferr
	if err != nil {
		${0:TARGET}
	}

snippet ifexprerr
	if err := ${1:expr}; err != nil {
		${0:TARGET}
	}

snippet test_run
	t.Run("${1:title}", func(t *testing.T) {
		${0:TARGET}
	})

snippet if_has_key
	if ${1:value}, ok := ${2:dict}[${3:key}]; ok {
		${0:TARGET}
	}

snippet panic
	panic(err)

snippet else
	else {
		${0:TARGET}
	}

snippet elseif
	else if ${1:condition} {
		${0:TARGET}
	}

snippet foreach
	for ${1:index}, ${2:name} := range ${3:variable} {
		${0:TARGET}
	}

snippet foreach_no_index
	for _, ${1:name} := range ${2:variable} {
		${0:TARGET}
	}

snippet switch
	switch ${1:variable} {
	case ${2:expr}:
		${3:TARGET}
	default:
		${0:TARGET}
	}

snippet switch_type
	switch ${1:variable}.(type) {
	case ${2:expr}:
		${3:TARGET}
	default:
		${0:TARGET}
	}

snippet switch_no_var
	switch {
	case ${1:expr}:
		${2:TARGET}
	default:
		${0:TARGET}
	}

snippet select
	select {
	case ${1:var} := <-${2:channel}:
		${3:TARGET}
	default:
		${0:TARGET}
	}

snippet method
	func (${1:receiver} *${2:structName}) ${3:name}() ${4:returnType} {
		${0:TARGET}
	}

snippet json_tag
	\`json:"${0:name}"\`

snippet defer
	defer ${0:TARGET}

snippet import
	import (
		${0:TARGET}
	)

snippet pp
    pp.Println(${0})
