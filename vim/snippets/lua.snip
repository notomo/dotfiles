
snippet local
alias l
	local ${1:name} = ${0:value}

snippet local_func
	local function ${1:name}(${2:args})
		${0:TARGET}
	end

snippet require
options word
	require("${1:name}")

snippet import
	local ${1:Name} = require("${2:path}").$1

snippet dofile
	dofile(${1:file_path})

snippet return
	return ${1:nil}

snippet function
	function ${1:name}(${2:args})
		${0:return}
	end

snippet closure
options word
	function(${1:args})
		${0:return}
	end

snippet ifonly
alias if
	if ${1:condition} then
		${0:TARGET}
	end

snippet iferr
	if err then
		return ${0:err}
	end

snippet do
alias block
	do
		${0:TARGET}
	end

snippet elseif
	elseif ${1:condition} then
		${0:TARGET}

snippet else
	else
		${0:TARGET}

snippet print
	print(${1:expr})

snippet for_inc
	for i = ${1:initial}, ${2:end}${3:, increment} do
		${0:TARGET}
	end

snippet error
	error(${0:TARGET})

snippet foreach_array
alias for
	for ${1:key}, ${2:value} in ipairs(${3:expr}) do
		${0:TARGET}
	end

snippet foreach_dict
	for ${1:key}, ${2:value} in pairs(${3:expr}) do
		${0:TARGET}
	end

snippet while
	while ${1:condition} do
		${0:TARGET}
	end

snippet repeat
	repeat
		${0:TARGET}
	until ${1:condition}

snippet list
options word
	{${0:value, }}

snippet dict
options word
	{${1:key}=${0:value}}

snippet not
options word
	not ${1:expr}

snippet class
	local ${1:name} = {}
	$1.__index = $1
	M.$1 = $1

	function $1.new()
		local tbl = {}
		return setmetatable(tbl, $1)
	end

snippet method
	function ${1:class}.${2:method_name}(self)
		${0:TARGET}
	end

snippet member
	M.${1:name} = ${0:value}

snippet length
options word
	#${1:expr}

snippet tonumber
options word
	tonumber(${0:expr})

snippet tostring
options word
	tostring(${0:expr})

snippet format
options word
	("${1:format}"):format(${0:str})

snippet unpack
options word
	unpack(${0:expr})

snippet inspect
	print(vim.inspect(${0}))

snippet insert
	table.insert(${1:table}, ${0:added})

snippet remove
	table.remove(${1:table}, ${0:index})

snippet join
alias concat
options word
	table.concat(${1:table}, ${0:sep})

snippet describe
	describe('${1:name}', function ()

		before_each(helper.before_each)
		after_each(helper.after_each)

		${0:TARGET}

	end)

snippet it
	it('${1:name}', function ()
		${0:TARGET}
	end)

snippet before_each
	before_each(function ()
		${0:TARGET}
	end)

snippet setup
	setup(function ()
		${0:TARGET}
	end)

snippet after_each
	after_each(function ()
		${0:TARGET}
	end)

snippet teardown
	teardown(function ()
		${0:TARGET}
	end)

snippet goto
	goto ${1:label}

snippet continue
	goto continue

snippet label
	::${1:continue}::

snippet pcall
	local ok, result = pcall(${1:func}, ${0:arg})

snippet xpcall
	local ok, result = xpcall(${1:func}, ${0:handler})

snippet trace
	debug.traceback

snippet env
options word
	os.getenv(${0:name})

snippet module
alias m
	local M = {}
	M.__index = M
	
	${0}
	
	return M

snippet M
	function M.${1:name}()
        ${0:TARGET}
	end

snippet conditional
	${1:condition} and ${1:expr1} or ${1:expr2}

snippet setmetatable
	setmetatable(${1:value}, ${0:metatable})

snippet index
	function ${1:class}.__index(self, k)
		return rawget($1, k) or self._${0:base}[k]
	end

snippet meta
	${1:Name}.__${2:method} = ${0:expr}

snippet api
options word
	vim.api.nvim_${0:name}

snippet set_lines
options word
	vim.api.nvim_buf_set_lines(bufnr, 0, -1, true, {${0:TARGET}})

snippet fn
options word
	vim.fn.${1:name}(${0:args})

snippet mode
options word
	vim.api.nvim_get_mode().mode${0}

snippet namespace
options word
	local ns = vim.api.nvim_create_namespace("${0:name}")

snippet wait
	local ok = vim.wait(${1:1000}, function ()
		return ${0:finished}
	end)

snippet create_buffer
alias buffer
	local bufnr = vim.api.nvim_create_buf(false, true)

snippet open_win
	local bufnr = vim.api.nvim_create_buf(false, true)
	vim.api.nvim_buf_set_lines(bufnr, 0, -1, false, {${1:line}})
	vim.api.nvim_open_win(bufnr, true, {
		width = 50,
		height = 10,
		relative = "editor",
		row = 10,
		col = 10,
		focusable = true,
		external = false,
		style = "minimal",
	})

snippet schedule
	vim.schedule(function()
		${0:TARGET}
	end)

snippet command
alias cmd
options word
	vim.cmd([[${1:excmd}]])

snippet bench
	do
		local count = 1000
		local s = vim.fn.reltimefloat(vim.fn.reltime())
		for _ = 1, count do
			${0:TARGET}
		end
		local e = vim.fn.reltimefloat(vim.fn.reltime())
		print(vim.inspect(e - s))
	end

snippet filter
options word
	vim.tbl_filter(function (${1:e})
		return ${2:expr}
	end, ${0:table})

snippet map
options word
	vim.tbl_map(function (${2:e})
		return ${0:expr}
	end, ${1:table})

snippet sort_desc
	table.sort(${1:table}, function(a, b)
	  return ${2:a} > ${0:b}
	end)

snippet for_iter
	for ${1:value} in ${2:iter} do
		${0:TARGET}
	end

snippet coroutine
options word
	coroutine.create(function()
		${0:TARGET}
	end)

snippet yield
    coroutine.yield(${0:value})

snippet resume
	local ok, v = coroutine.resume(${0:co})

# running
# normal
# suspended
# dead
snippet status
	coroutine.status(${0:co})

snippet validate
	vim.validate({${1:name} = {$1, "${1:string}"}})

snippet _validate
    ${1:name} = {$1, "${1:string}"}

snippet and
options word
	and ${0:expr}

snippet or
options word
	or ${0:expr}

snippet new
	function ${1:Class}.new(${2:args})
		local tbl = {${0:TARGET}}
		return setmetatable(tbl, $1)
	end

snippet lines
options word
	vim.api.nvim_buf_get_lines(0, 0, -1, false)

snippet alias
alias aliases
	aliases:set("${1:name}", ${0:rhs})

snippet keymap
	vim.keymap.set("${1:n}", "${2:lhs}", [[${3:rhs}]])

snippet autocmd
	vim.api.nvim_create_autocmd({"${1:event_name}"}, {
		group = "${2:group_name}",
		pattern = {"${3:pattern}"},
		callback = function()
			${0:TARGET}
		end
	})

snippet buffer_autocmd
	vim.api.nvim_create_autocmd({"${1:event_name}"}, {
		group = "${2:group_name}",
		buffer = ${3:bufnr}
		callback = function()
			${0:TARGET}
		end
	})

snippet augroup
	vim.api.nvim_create_augroup("${1:name}", {})
