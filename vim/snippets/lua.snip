
snippet local
	local ${1:name} = ${0:value}

snippet local_func
	local function ${1:name}(${2:args})
		${0:TARGET}
	end

snippet require
	require("${1:name}")

snippet dofile
	dofile(${1:file_path})

snippet return
	return ${1:expr}

snippet function
	function ${1:name}(${2:args})
		${0:TARGET}
	end

snippet closure
options word
	function(${1:args})
		${0:TARGET}
	end

snippet ifonly
	if ${1:condition} then
		${0:TARGET}
	end

snippet do
alias block
	do
		${0:TARGET}
	end

snippet elseif
	elseif ${1:condition} then
		${0:TARGET}

snippet else
	else
		${0:TARGET}

snippet print
	print(${1:expr})

snippet for_inc
	for i = ${1:initial}, ${2:end}${3:, increment} do
		${0:TARGET}
	end

snippet foreach_array
alias for
	for ${1:key}, ${2:value} in ipairs(${3:expr}) do
		${0:TARGET}
	end

snippet foreach_dict
	for ${1:key}, ${2:value} in pairs(${3:expr}) do
		${0:TARGET}
	end

snippet while
	while ${1:condition} do
		${0:TARGET}
	end

snippet repeat
	repeat
		${0:TARGET}
	until ${1:condition}

snippet list
options word
	{${0:value, }}

snippet dict
options word
	{${1:key}=${0:value}}

snippet not
	not ${1:expr}

snippet method
	function ${1:class}.${2:method_name}(self)
		${0:TARGET}
	end

snippet member
	M.${1:name} = ${0:value}

snippet length
options word
	#${1:expr}

snippet tonumber
	tonumber(${0:expr})

snippet tostring
	tostring(${0:expr})

snippet format
	("${1:format}"):format(${0:str})

snippet unpack
	unpack(${0:expr})

snippet inspect
	print(vim.inspect(${0}))

snippet insert
	table.insert(${1:table}, ${0:added})

snippet remove
	table.remove(${1:table}, ${0:index})

snippet join
options word
	table.concat(${1:table}, ${0:sep})

snippet describe
	describe('${1:name}', function ()
		${0:TARGET}
	end)

snippet it
	it('${1:name}', function ()
		${0:TARGET}
	end)

snippet before_each
	before_each(function ()
		${0:TARGET}
	end)

snippet setup
	setup(function ()
		${0:TARGET}
	end)

snippet after_each
	after_each(function ()
		${0:TARGET}
	end)

snippet teardown
	teardown(function ()
		${0:TARGET}
	end)

snippet goto
	goto ${1:label}

snippet continue
	goto continue

snippet label
	::${1:continue}::

snippet pcall
	local ok, result = pcall(${1:func}, ${0:arg})

snippet xpcall
	local ok, result = xpcall(${1:func}, ${0:handler})

snippet trace
	debug.traceback

snippet env
	os.getenv(${0:name})

snippet module
	local M = {}
	
	${0}
	
	return M

snippet M
	M.${1:name} = ${0:expr}

snippet conditional
	${1:condition} and ${1:expr1} or ${1:expr2}
