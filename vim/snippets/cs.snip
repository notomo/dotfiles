
snippet namespace
abbr namespace {}
options head
	namespace ${1:NameSpace} {
		${0:TARGET}
	}

snippet class
abbr class {}
	class ${1:ClassName} {
		${0:TARGET}
	}

snippet struct
abbr struct {}
	struct ${1:StructName} {
		${0:TARGET}
	}

snippet interface
abbr interface {}
	interface ${1:InterfaceName} {
		${0:TARGET}
	}

snippet method
	${1:void} ${2:MethodName}(${3:#:arguments}) {
		${0:TARGET}
	}

snippet enum
abbr enum {}
	enum ${1:EnumName} {
		${0:TARGET}
	}

snippet get
abbr get {}
	get {${1:TARGET}}${0}

snippet set
abbr set {}
	set {${1:TARGET}}${0}

snippet if
abbr if () {}
	if (${1:condition}) {
		${0:TARGET}
	}

snippet elseif
alias elif
abbr else if () {}
	else if (${1:condition}) {
		${0:TARGET}
	}

snippet ifelse
abbr if () {} else {}
	if (${1:condition}) {
		${2:TARGET}
	} else {
		${3:TARGET}
	}

snippet while
abbr while () {}
	while (${1:condition}) {
		${0:TARGET}
	}

snippet do_while
alias dowhile
abbr do {} while() {}
	do {
		${0:TARGET}
	} while (${1:condition});

snippet for
abbr for () {}
	for (${1:#:var}; ${2:condition}; ${3:#:effect}) {
		${0:TARGET}
	}

snippet foreach
abbr foreach () {}
	foreach (${1:#:var} in ${2:#:iter}) {
		${0:TARGET}
	}

snippet switch
abbr switch () {}
	switch (${1:#:var}) {
	case ${2:#:val}:
		${0:TARGET}
		break;
	}

snippet case
options head
	case ${1:#:val}:
		${0:TARGET}
		break;

snippet break
options head
	break;

snippet default
options head
	default:
		${0:TARGET}
		break;

snippet try_catch
abbr try {} catch () {}
options head
	try {
		${0:TARGET}
	} catch (${1:Exception} ${2:e}) {
		${3:Console.WriteLine(e.Message);}
	}

snippet catch
abbr catch () {}
	catch (${1:Exception} ${2:e}) {
		${0:Console.WriteLine(e.Message);}
	}

snippet finally
alias fin
abbr finally {}
	finally {
		${0:TARGET}
	}

snippet throw
options head
	throw ${0:#:exception}

