snippet init
abbr def __init__
	def __init__(self) -> None:
		${0:pass}

snippet super
	super().${1:method}(${0:#:args})

snippet property
abbr @property
	@property
	def ${1:name}(self):
	    return self._$1

snippet setter
abbr @x.setter
	@${1:name}.setter
	def $1(self, $1):
		self._$1 = $1

snippet selfx
abbr self._x = x
	self._${1:x} = $1

snippet #!
abbr #!/usr/bin/env python3
alias shebang
	#!/usr/bin/env python3
	${0}

snippet class
	class ${1:#:name}(${0:object}):
		pass

snippet def
	def ${1:#:name}(${2}):
		${0:pass}

snippet defm
	def ${1:#:name}(self,${2}):
		${0:pass}

snippet classmethoddef
	@classmethod
	def ${1:name}(cls):
		${0:pass}

snippet staticmethod
	@staticmethod
	def ${1:name}():
		${0:pass}

snippet elif
	elif ${1:#:condition}:
		${0:pass}

snippet else
	else:
		${0:pass}

snippet ifelse
	if ${1:#:condition}:
		${2:#:pass}
	else:
		${0:#:pass}

snippet with_open
	with open(${1:#:file}, '${2:r}') as ${3:f}:
		${0:pass}

snippet for
	for ${1:#:value} in ${2:#:list}:
		${0:pass}

snippet ifonly
	if ${1:#:condition}:
		${0:pass}

snippet ifmain
alias main
	if __name__ == '__main__':
		${0:pass}

snippet tryexcept
	try:
		${1:pass}
	except ${2:#:ExceptionClass}:
		${0:pass}

snippet tryfinally
	try:
		${1:pass}
	finally:
		${0:pass}

snippet while
	while ${1:#:condition}:
		${0:pass}

snippet with
	with ${1:open}(${2:#:filename, mode}) as ${3:f}:
		${0:pass}

snippet print
	print(${0:#:TARGET})

snippet import
	import ${0:module}

snippet from
	from ${1:module} import ${0:attribute}

snippet typing
	from typing import ${0:attribute}

snippet return
	return ${0:value}

snippet format
options word
	f'{${0:value}}'

snippet as
	as ${0:alias}

snippet noqa
	 # noqa

snippet type
	 # type: ${0:Name}

snippet raise
	raise ${1:Name}('${0:message}')

snippet coding
abbr # -*- coding ...
	# -*- coding: utf-8 -*-

snippet mock
	${0:name} = Mock()

snippet mock_with_spec
	${1:name} = Mock(spec=${0:ClassName})

snippet mock_return_value
	${1:mock}.return_value = ${0:value}

snippet is_not
options word
	is not ${0:value}

snippet assert
	assert ${0:condition}

snippet fixture
	@fixture
	def ${0:name}():
		pass

snippet hasattr
	hasattr(${1:object}, ${0:attribute_name})

snippet themis_log
	self._vim.call('themis#log', ${0:message})

snippet and
	and ${0:condition}

snippet or
	or ${0:condition}

snippet abstruct_class
	from abc import ABCMeta, abstractmethod

	class ${1:#:name}(metaclass=ABCMeta):
		pass

snippet yield
	yield ${0:value}

snippet lambda
options word
	lambda ${1:x}: ${0:return_expr}

snippet pp
	pprint.pprint(${0:value})
