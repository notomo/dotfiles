snippet init
abbr def __init__
	def __init__(self) -> None:
		${0:pass}

snippet super
	super().${2:method}(${3:#:args})

snippet property
abbr @property
	@property
	def ${1:#name}(self):
	    return self._$1

snippet setter
abbr @x.setter
	@${1:#:name}.setter
	def $1(self, $1):
		self._$1 = $1

snippet selfx
abbr self._x = x
	self._${1:x} = $1
	${0}

snippet #!
abbr #!/usr/bin/env python3
alias shebang
	#!/usr/bin/env python3
	${0}

snippet class
	class ${1:#:name}(${2:object}):
		pass

snippet def
	def ${1:#:name}(${2}):
		${0:pass}

snippet defm
	def ${1:#:name}(self,${2}):
		${0:pass}

snippet classmethoddef
	@classmethod
	def ${1:name}(cls):
		${0:pass}

snippet staticmethod
	@staticmethod
	def ${1:name}():
		${0:pass}

snippet elif
	elif ${1:#:condition}:
		${0:pass}

snippet else
	else:
		${0:pass}

snippet ifelse
	if ${1:#:condition}:
		${2:#:pass}
	else:
		${0:#:pass}

snippet with_open
	with open(${1:#:file}, '${2:r}') as ${3:f}:
		${0:pass}

snippet for
	for ${1:#:value} in ${2:#:list}:
		${0:pass}

snippet ifonly
	if ${1:#:condition}:
		${0:pass}

snippet ifmain
alias main
	if __name__ == '__main__':
		${0:pass}

snippet tryexcept
	try:
		${1:pass}
	except ${2:#:ExceptionClass}:
		${3:pass}

snippet tryfinally
	try:
		${1:pass}
	finally:
		${2:pass}

snippet while
	while ${1:#:condition}:
		${0:pass}

snippet with
	with ${1:open}(${2:#:filename, mode}) as ${3:f}:
		${0:pass}

snippet print
	print(${0:#:TARGET})

snippet import
	import ${0:module}

snippet from
	from ${1:module} import ${0:attribute}

snippet typing
	from typing import ${0:attribute}

snippet coding
abbr # -*- coding ...
	# -*- coding: utf-8 -*-
