snippet let
	let ${0:name}

snippet rec
	rec ${0:name}

snippet in
	in ${0:expr}

snippet match
	match ${1:expr} with
	  ${2:pattern} -> ${0:expr}

snippet function
	function
	  ${0:TARGET}

snippet pattern
	| ${1:pattern} -> ${0:expr}

snippet if
	if ${1:condition} then ${2:expr} else ${0:TARGET}

snippet type
	type ${1:name} = ${1:type}

snippet of
	of ${0:type}

snippet failwith
	failwith ${0:message}

snippet closure
	(fun (${1:args}) -> ${0:expr})

snippet module
	module ${1:name} = ${0:expr}

snippet struct
	struct
		${0:TARGET}
	end

snippet as
	as ${0:name}
