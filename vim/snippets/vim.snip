snippet nnoremap
	nnoremap ${1:lhs} ${0:rhs}

snippet call
options word
	call ${1:function}(${0:#:args})

snippet call_sid_func
options word
	<SID>${1:function}(${0:#:arg})

snippet mapcommand
options word
	<Cmd>${0:command}<CR>

snippet ifonly
	if ${1:#:condition}
		${0:TARGET}
	endif

snippet elseif
	elseif ${1:#:condition}
		${0:TARGET}

snippet else
	else
		${0:TARGET}

snippet ifelse
	if ${1:#:condition}
		${2:TARGET}
	else
		${0}
	endif

snippet for
	for ${1:#:var} in ${2:#:list}
		${0:TARGET}
	endfor

snippet while
	while ${1:#:condition}
		${0:TARGET}
	endwhile

snippet function
alias func
	function! ${1:#:func_name}(${2}) abort
		${0:TARGET}
	endfunction

snippet try_catch
	try
		${1:TARGET}
	catch /${2:#:pattern}/
		${0}
	endtry

snippet try_finally
alias tryf
	try
		${1:TARGET}
	finally
		${0}
	endtry

snippet catch
	catch ${1:/${0:#:pattern: empty, E484, Vim(cmdname):{errmsg\\}\}/}

snippet echomsg
	echomsg ${1:TARGET}

snippet echomsg_str
	echomsg string(${0:value})

snippet printf
	printf('${1:format}', ${0:values, ...})

snippet command
	command! ${1:#:command_name} call ${0:#:func_name}

snippet augroup
	augroup ${1:#:augroup_name}
		autocmd!
		autocmd ${0:#:event}
	augroup END

snippet autocmd
	autocmd MyAuGroup ${1:event} ${2:pattern} ${0:command}

snippet autoload
alias afun
	function! `substitute(matchstr(neosnippet#util#expand('%:p:r'), '/autoload/\zs.*$'), '/', '#', 'g')`#${1:#:func_name}(${2:#:args}) abort
		${0}
	endfunction

snippet let
	let ${1:variable} = ${0:value}

snippet lets
	let s:${1:variable} = ${0:value}

snippet return 
	return ${0:expr}

snippet themis_log
alias log
	call themis#log(${0:message})

snippet assert
	call s:assert.equals(${1:result}, ${0:expected})

snippet lambda
options word
	{${1:key}, ${2:var} -> ${0:result}}

snippet if_exists
	if exists('${1:condition}')
		${0:TARGET}
	endif

snippet throw
	throw '${0:message}'

snippet regex_match
	${1:expr} =~? ${0:pattern}

snippet regex_not_match
	${1:expr} !~? ${0:pattern}

snippet highlight_link
	highlight ${1:#:default }link ${2:Name} ${1:ToGroupName}

snippet new
	function! `substitute(matchstr(neosnippet#util#expand('%:p:r'), '/autoload/\zs.*$'), '/', '#', 'g')`#new(${1:args}) abort
		let `neosnippet#util#expand('%:r')` = {
			\ '': '',
		\ }

		function! `neosnippet#util#expand('%:r')`.${2:name}() abort
		endfunction

		return `neosnippet#util#expand('%:r')`
	endfunction

snippet method
	function! `neosnippet#util#expand('%:r')`.${1:name}() abort
		${0:TARGET}
	endfunction

snippet dict
	{
		\ '${1:key}': ${0:value},
	\ }

snippet if_has_key
	if has_key(${1:dict}, ${2:key})
		${0:TARGET}
	endif

snippet doautocmd
	doautocmd ${1:User} ${0:pattern}

snippet test
	let s:suite = themis#suite(${1:name})
	let s:assert = themis#helper('assert')

	function! s:suite.before_each()
	endfunction

	function! s:suite.after_each()
	endfunction

	function! s:suite.${2:name}()
		${0:TARGET}
	endfunction

snippet nested_test
	function! s:suite.__${1:name}__() abort
		let suite = themis#suite('${2:name}')

		function! suite.before_each()
		endfunction

		function! suite.after_each()
		endfunction

		function! suite.${3:name}()
			${0:TARGET}
		endfunction

	endfunction

snippet jobstart
	function! s:handle_stderr(job_id, data, event) abort dict
		echomsg '[stderr] ' . string(a:data)
	endfunction

	function! s:handle_stdout(job_id, data, event) abort dict
		echomsg '[stdout] ' . string(a:data)
	endfunction

	function! s:handle_exit(job_id, exit_code, event) abort dict
		echomsg '[exit_code] ' . string(a:exit_code)
	endfunction

	let s:options = {
		\ 'on_exit': function('s:handle_exit'),
		\ 'on_stdout': function('s:handle_stdout'),
		\ 'on_stderr': function('s:handle_stderr'),
	\ }
	let s:cmd = ['${0:TARGET}']
	let s:id = jobstart(s:cmd, s:options)
	echomsg '[id] ' . string(s:id)

snippet lua_heredoc
	lua << EOF
	${0:TARGET}
	EOF
