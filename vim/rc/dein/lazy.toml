
[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = {nox = '<Plug>'}
hook_add = 'source ~/.vim/rc/plugins/easymotion.vim'
hook_source = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_move_highlight = 1
let g:EasyMotion_landing_highlight = 0
let g:EasyMotion_inc_highlight = 1
let g:EasyMotion_keys = 'asdghklqwertyuopzxcvbnmf;,./0'
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
if = "!has('nvim')"
on_ft = 'python'
hook_source = '''
let g:jedi#completions_enabled = 1
let g:jedi#auto_vim_configuration = 0
let g:jedi#rename_command = '<Nop>'
let g:jedi#goto_assignments_command = '<Leader>dp'
let g:jedi#usages_command = '<Leader>du'
let g:jedi#popup_select_first = 0
let g:jedi#documentation_command='<Nop>'
let g:jedi#force_py_version = 3
let g:jedi#goto_command='<Nop>'
'''

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
omap ae <Plug>(textobj-entire-a)
omap ie <Plug>(textobj-entire-i)
vmap ae <Plug>(textobj-entire-a)
vmap ie <Plug>(textobj-entire-i)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
omap aj <Plug>(textobj-multiblock-a)
omap ij <Plug>(textobj-multiblock-i)
vmap aj <Plug>(textobj-multiblock-a)
vmap ij <Plug>(textobj-multiblock-i)
'''
hook_source = '''
let g:textobj_multiblock_blocks = [
\   [ "(", ")" ],
\   [ "[", "]" ],
\   [ "{", "}" ],
\   [ '<', '>' ],
\   [ '"', '"'],
\   [ "'", "'"],
\   [ "`", "`", 1],
\]
'''

[[plugins]]
repo = 'osyo-manga/vim-operator-blockwise'
depends = ['vim-operator-user', 'vim-textobj-blockwise']
on_map = {n = '<Plug>'}
hook_add = '''
nmap [operator]c <Plug>(operator-blockwise-change)
nmap [operator]d <Plug>(operator-blockwise-delete)
nmap [operator]y <Plug>(operator-blockwise-yank)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-blockwise'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}

# [[plugins]]
# repo = 'bps/vim-textobj-python'
# depends = 'vim-textobj-user'
# on_map = {ox = '<Plug>'}
# on_ft = 'python'
# hook_add = '''
# xmap <buffer> af <Plug>(textobj-python-function-a)
# omap <buffer> af <Plug>(textobj-python-function-a)
# xmap <buffer> if <Plug>(textobj-python-function-i)
# omap <buffer> if <Plug>(textobj-python-function-i)
# xmap <buffer> ac <Plug>(textobj-python-class-a)
# omap <buffer> ac <Plug>(textobj-python-class-a)
# xmap <buffer> ic <Plug>(textobj-python-class-i)
# omap <buffer> ic <Plug>(textobj-python-class-i)
# '''

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
vmap ag <Plug>(textobj-line-a)
vmap ig <Plug>(textobj-line-i)
omap ag <Plug>(textobj-line-a)
omap ig <Plug>(textobj-line-i)
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = {nx = '<Plug>(openbrowser-'}
on_cmd = 'OpenBrowser'
hook_add = '''
nnoremap [browser] <Nop>
nmap [exec]b [browser]
vnoremap [browser] <Nop>
vmap [exec]b [browser]

nmap [browser]s <Plug>(openbrowser-smart-search)
vmap [browser]s <Plug>(openbrowser-smart-search)
nmap [browser]o <Plug>(openbrowser-open)
vmap [browser]o <Plug>(openbrowser-open)
nnoremap [browser]i :<C-u>OpenBrowserSearch<Space>

if has('nvim') && executable('lemonade') && has('unix')
    let g:openbrowser_browser_commands = [
    \ {'name': 'lemonade',
    \  'args': 'lemonade open {uri}'}
    \ ]
endif
'''

[[plugins]]
repo = 'notomo/incsearch.vim'
on_map = {nox = '<Plug>(incsearch-'}
hook_add = '''
map / <Plug>(incsearch-easymotion-/)\v
map <Space>/k <Plug>(incsearch-easymotion-?)
map <Space>/j <Plug>(incsearch-easymotion-stay)

nmap s/ <Plug>(incsearch-easymotion-/)<C-r><C-w>
nmap sk <Plug>(incsearch-easymotion-?)<C-r><C-w>
nmap sj <Plug>(incsearch-easymotion-stay)<C-r><C-w>
noremap <expr> s. incsearch#go({'pattern': histget('/', -1)})

nmap s<Space>/ <Plug>(incsearch-easymotion-/)<C-r>"
nmap s<Space>k <Plug>(incsearch-easymotion-?)<C-r>"
nmap s<Space>j <Plug>(incsearch-easymotion-stay)<C-r>"

map n <Plug>(incsearch-nohl-n)
map N <Plug>(incsearch-nohl-N)
nmap n <Plug>(incsearch-nohl)<Plug>(anzu-n-with-echo)
nmap N <Plug>(incsearch-nohl)<Plug>(anzu-N-with-echo)

omap <silent> ra <Plug>(incsearch-forward)\v[[({<"']\zs[^[({<"']{-}%#<CR>
omap <silent> rA <Plug>(incsearch-forward)\v[[({<"']\zs.{-}%#<CR>
'''
hook_post_source = '''
let g:incsearch#auto_nohlsearch = 1
IncSearchNoreMap <Tab> <Over>(incsearch-next)
IncSearchNoreMap <S-Tab> <Over>(incsearch-prev)
IncSearchNoreMap <C-Space> <Tab>
IncSearchNoreMap <C-j> <Down>
IncSearchNoreMap <C-k> <Up>
IncSearchNoreMap <C-l> <Right>
IncSearchNoreMap <Space> <CR>
IncSearchNoreMap <S-Space> <Space>
IncSearchNoreMap <C-n> <Over>(incsearch-scroll-f)
IncSearchNoreMap <C-p> <Over>(incsearch-scroll-b)
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = {n = '<Plug>(anzu-n-with-echo)'}

[[plugins]]
repo = 'sgur/vim-py3diff'
if = "has('python3')"
hook_add = 'set diffexpr=py3diff#diffexpr()'

[[plugins]]
repo = 'tyru/restart.vim'
if = "has('gui')"
on_cmd = 'Restart'
hook_add = 'nnoremap [exec]R :<C-u>Restart<CR>'
hook_source = 'let g:restart_sessionoptions = "curdir,help,tabpages"'

[[plugins]]
repo = 'haya14busa/incsearch-easymotion.vim'
depends = ['incsearch.vim', 'vim-easymotion']
on_map = {nox = '<Plug>(incsearch-easymotion-'}

[[plugins]]
repo = 'bkad/CamelCaseMotion'
on_map = {nox = '<Plug>CamelCaseMotion_'}
hook_add = '''
map <Leader>w <Plug>CamelCaseMotion_w
map <Leader>b <Plug>CamelCaseMotion_b
map <Leader>e <Plug>CamelCaseMotion_e
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
map r <Plug>(operator-replace)
onoremap <Plug>(builtin-gn) gn
nnoremap <Plug>(builtin-/) /
nmap [edit]n *``<Plug>(operator-replace)<Plug>(builtin-gn)
vmap <expr> [edit]n "\"ry<Plug>(builtin-/)\\V\<C-r>=substitute(escape(@r, '/\'), '\\n', '\\\\n', 'g')\<CR>\<CR>" . "``\"+<Plug>(operator-replace)<Plug>(builtin-gn)"
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-from_regexp'
depends = 'vim-textobj-user'
on_func = ['textobj#from_regexp#mapexpr']
hook_add = '''
omap <expr> pd textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+')
xmap <expr> pd textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+')
omap <expr> py textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+->')
xmap <expr> py textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+->')

omap <expr> iz textobj#from_regexp#mapexpr('\d\{4}-\d\{2}-\d\{2} \d\{2}:\d\{2}:\d\{2}')
xmap <expr> iz textobj#from_regexp#mapexpr('\d\{4}-\d\{2}-\d\{2} \d\{2}:\d\{2}:\d\{2}')

omap <expr> is textobj#from_regexp#mapexpr('_\zs.\{-}\ze_')
xmap <expr> is textobj#from_regexp#mapexpr('_\zs.\{-}\ze_')
omap <expr> as textobj#from_regexp#mapexpr('_.\{-1,}\(_\)\@=')
xmap <expr> as textobj#from_regexp#mapexpr('_.\{-1,}\(_\)\@=')

omap <expr> i, textobj#from_regexp#mapexpr(',\zs.\{-}\ze,')
xmap <expr> i, textobj#from_regexp#mapexpr(',\zs.\{-}\ze,')
omap <expr> a, textobj#from_regexp#mapexpr(',.\{-1,}\(,\)\@=')
xmap <expr> a, textobj#from_regexp#mapexpr(',.\{-1,}\(,\)\@=')

omap <expr> i. textobj#from_regexp#mapexpr('\.\zs.\{-}\ze\.')
xmap <expr> i. textobj#from_regexp#mapexpr('\.\zs.\{-}\ze\.')
omap <expr> a. textobj#from_regexp#mapexpr('\..\{-1,}\(\.\)\@=')
xmap <expr> a. textobj#from_regexp#mapexpr('\..\{-1,}\(\.\)\@=')

omap <expr> ix textobj#from_regexp#mapexpr('\v\*\zs[^*]+\ze\*')
xmap <expr> ix textobj#from_regexp#mapexpr('\v\*\zs[^*]+\ze\*')
omap <expr> ax textobj#from_regexp#mapexpr('\*.\{-1,}\(*\)\@=')
xmap <expr> ax textobj#from_regexp#mapexpr('\*.\{-1,}\(*\)\@=')

omap <expr> i/ textobj#from_regexp#mapexpr('/\zs.\{-}\ze/')
xmap <expr> i/ textobj#from_regexp#mapexpr('/\zs.\{-}\ze/')
omap <expr> a/ textobj#from_regexp#mapexpr('/.\{-1,}\(/\)\@=')
xmap <expr> a/ textobj#from_regexp#mapexpr('/.\{-1,}\(/\)\@=')

omap <expr> rl textobj#from_regexp#mapexpr('\v%#[^])}>"'']*')
omap <expr> rL textobj#from_regexp#mapexpr('\v%#.*\ze[])}>"'']')
'''

[[plugins]]
repo = 'tyru/current-func-info.vim'
on_func = ['cfi#format']

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {nox = '<Plug>'}
hook_add = '''
noremap [surround] <Nop>
map s [surround]
map <silent>[surround]a <Plug>(operator-surround-append)
map <silent>[surround]d <Plug>(operator-surround-delete)
map <silent>[surround]r <Plug>(operator-surround-replace)
'''
hook_source = 'source ~/.vim/rc/plugins/operator-surround.vim'

[[plugins]]
repo = 'thinca/vim-fontzoom'
on_cmd = 'Fontzoom'
on_map = {n = '<Plug>'}
hook_add = '''
nmap <C-Up> <Plug>(fontzoom-larger)
nmap <C-Down> <Plug>(fontzoom-smaller)
nnoremap <M-Up> :<C-u>Fontzoom!<CR>
nnoremap <M-Down> :<C-u>Fontzoom!<CR>
'''

[[plugins]]
repo = 'h1mesuke/vim-alignta'
on_cmd = 'Alignta'
hook_add = '''
vnoremap [alignta] <Nop>
vmap <Leader>a [alignta]
vnoremap [alignta]i :<C-u>'<,'>Alignta =><CR>
vnoremap [alignta]e :<C-u>'<,'>Alignta =<CR>
vnoremap [alignta], :<C-u>'<,'>Alignta ,<CR>
vnoremap [alignta]c :<C-u>'<,'>Alignta :<CR>
vnoremap [alignta]p :<C-u>'<,'>Alignta )<CR>
vnoremap [alignta]<Space> :<C-u>'<,'>Alignta <<0 \ <CR>
'''

[[plugins]]
repo = 'lilydjwg/colorizer'
on_ft = ['javascript', 'css', 'html', 'vim']
on_cmd = 'ColorToggle'
hook_add = 'nnoremap [exec]C :<C-u>ColorToggle<CR>'

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = {n = '<Plug>'}
on_cmd = 'QuickRun'
hook_add = '''
nmap <silent> <Leader>Q <Plug>(quickrun)
vnoremap <silent> <Leader>Q :QuickRun -mode v<CR>
'''
hook_source = '''
if !exists('g:quickrun_config')
    let g:quickrun_config = {}
endif

let g:quickrun_config['_'] = {
\   "runner" : "vimproc",
\   "hook/output_encode/enable" : 1,
\   "hook/output_encode/encoding" : "cp932",
\   "hook/close_unite_quickfix/enable_hook_loaded" : 1,
\   "hook/close_quickfix/enable_exit" : 1,
\   "hook/close_buffer/enable_failure" : 0,
\   "hook/close_buffer/enable_empty_data" : 1,
\   "outputter" : "multi:buffer:quickfix",
\   "outputter/buffer/split" : ":botright 8sp",
\   "runner/vimproc/updatetime" : 60,
\   "hook/neco/enable" : 1,
\   "hook/neco/redraw" : 1,
\   "hook/neco/wait" : 2,
\}

let g:quickrun_config['cpp'] = {
\   "type" : "cpp/clang-cl",
\}
let g:quickrun_config['cpp/clang-cl'] = {
\   'command': 'clang-cl',
\   'exec': ['%c %o %s /nologo /Fo%s:p:r.obj /Fe%s:p:r.exe > nul',
\            '%s:p:r.exe %a'],
\   'tempfile': '%{tempname()}.cpp',
\   'hook/sweep/files': ['%S:p:r.exe', '%S:p:r.obj'],
\   "hook/output_encode/encoding" : "utf-8",
\}

if has('unix')
    let g:quickrun_config['cs'] = {
    \   "type" : "cs/mcs",
    \   "hook/output_encode/encoding" : "utf-8",
    \}
else
    let g:quickrun_config['cs'] = {
    \   "hook/output_encode/encoding" : "sjis",
    \}
endif

let g:quickrun_config['vim'] = {
\   "hook/output_encode/encoding" : "utf-8",
\}
let g:quickrun_config['php'] = {
\   "hook/output_encode/encoding" : "utf-8",
\}
let g:quickrun_config['python'] = {
\   "command" : "python3.5",
\   "hook/output_encode/encoding" : "utf-8",
\}

'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
nmap <Space>c <Plug>(caw:hatpos:toggle)
vmap <Space>c <Plug>(caw:hatpos:toggle)
nmap <Space><Space>c <Plug>(caw:wrap:toggle)
vmap <Space><Space>c <Plug>(caw:wrap:toggle)
'''
hook_source = 'let g:caw_no_default_keymappings = 1'

[[plugins]]
repo = 'thinca/vim-ref'
on_map = {n = '<Plug>'}
hook_add = '''
nmap [keyword]r <Plug>(ref-keyword)
nnoremap <expr> [keyword]R ":<C-u>Ref webdict " . expand("<cword>") . "<CR>"
nnoremap <expr> [keyword]<C-r> ":<C-u>Ref webdict english " . expand("<cword>") . "<CR>"
'''
hook_source = '''
let g:ref_open = 'vsplit'
let g:ref_use_vimproc = 1
let g:ref_phpmanual_path = expand("~/.vim/reference/phpmanual")
let g:ref_pydoc_cmd = 'python3.5 -m pydoc'
let g:ref_source_webdict_sites = {
    \ 'english': {
        \ 'url': 'http://dictionary.infoseek.ne.jp/jeword/%s',
    \ },
    \ 'japanese': {
        \ 'url': 'http://dictionary.infoseek.ne.jp/ejword/%s',
    \ },
\ }
let g:ref_source_webdict_sites.default = 'japanese'
'''

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_if = 1

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_cmd = 'Switch'
hook_add = 'nnoremap [edit]s :<C-u>Switch<CR>'
hook_source = '''
let g:switch_mapping = ""

let g:switch_custom_definitions = [
\   {
\     '\<[a-z0-9]\+_\k\+\>': {
\       '_\(.\)' : '\U\1'
\     },
\     '\<[a-z0-9]\+[A-Z]\k\+\>': {
\       '\([A-Z]\)' : '_\l\1'
\     },
\   },
\ ]

autocmd MyAuGroup FileType php let b:switch_custom_definitions =
\ [
\   {
\     '\$this->\(\k\+\)' : 'self::$\1',
\     'self::\$\(\k\+\)' : '$\1',
\     '\$\(\k\+\)' : '$this->\1',
\   },
\   ['private', 'protected', 'public'],
\ ]

autocmd MyAuGroup FileType sql let b:switch_custom_definitions =
\ [
\   switch#NormalizedCase(['inner', 'left'])
\ ]

autocmd MyAuGroup FileType vim,toml let b:switch_custom_definitions =
\ [
\   {
\     '\v(\w)?map' : '\1noremap',
\     '\v(\w)?noremap' : '\1map',
\   },
\ ]

autocmd MyAuGroup FileType toml let b:switch_custom_definitions +=
\ [
\   ['hook_add', 'hook_source', 'hook_post_source'],
\ ]

'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = 'Linediff'
hook_add = 'vnoremap [diff]l :Linediff<CR>'

[[plugins]]
repo = 'sjl/gundo.vim'
on_cmd = 'GundoToggle'
hook_add = 'nnoremap <Leader>u :<C-u>GundoToggle<CR>'

[[plugins]]
repo = 'OrangeT/vim-csharp'
on_ft = 'cs'

[[plugins]]
repo = 'mhinz/vim-signify'
on_cmd = 'Signify'
on_map = {n = '<plug>(signify-'}
hook_add = '''
nmap [git]j <Plug>(signify-next-hunk)zz
nmap [git]k <Plug>(signify-prev-hunk)zz
nnoremap [git]h :<C-u>SignifyToggleHighlight<CR>
nnoremap [git]t :<C-u>SignifyToggle<CR>
'''
hook_source = 'let g:signify_disable_by_default = 0'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'tmhedberg/matchit'
on_ft = ['html', 'smarty', 'vim', 'sql', 'php']

# [[plugins]]
# repo = 'mattn/ssh-add-vim'
# on_cmd = ['SshAdd']

[[plugins]]
repo = 'haya14busa/vim-debugger'
on_cmd = ['DebugOn', 'Debugger']
hook_post_source = '''
cnoremap [debug] <Nop>
cmap j; [debug]
cnoremap [debug]s step<CR>
cnoremap [debug]g cont<CR>
cnoremap [debug]n next<CR>
cnoremap [debug]i interrupt<CR>
cnoremap [debug]q quit<CR>
cnoremap [debug]c Current<CR>
cnoremap [debug]f File<CR>
'''

[[plugins]]
repo = 'thinca/vim-prettyprint'
on_cmd = ['PP']
on_func = ['PP']

[[plugins]]
repo = 'thinca/vim-editvar'
on_cmd = ['Editvar']

# [[plugins]]
# repo = 'thinca/vim-themis'
# on_ft = 'vim'

[[plugins]]
repo = 'haya14busa/vim-operator-flashy'
on_map = {nox = '<Plug>'}
hook_add = '''
map y <Plug>(operator-flashy)
nmap Y <Plug>(operator-flashy)$
'''
hook_source = 'let g:operator#flashy#flash_time = 100'

[[plugins]]
repo = 't9md/vim-choosewin'
on_map = {n = '<Plug>'}
hook_add = 'nmap m<Space> <Plug>(choosewin)'
hook_source = '''
let g:choosewin_overlay_enable = 1
let g:choosewin_overlay_clear_multibyte = 1
let g:choosewin_tabline_replace = 0

let g:choosewin_color_overlay = {
      \ 'gui': ['DodgerBlue3', 'DodgerBlue3' ],
      \ 'cterm': [ 25, 25 ]
      \ }
let g:choosewin_color_overlay_current = {
      \ 'gui': ['firebrick1', 'firebrick1' ],
      \ 'cterm': [ 124, 124 ]
      \ }

let g:choosewin_label = 'ASKLWEZXCPIHFRTYUVNMQGODB'
let g:choosewin_blink_on_land      = 0
let g:choosewin_statusline_replace = 0
'''

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
if = "!has('nvim')"
on_ft = ['php', 'vim', 'python']
on_cmd = 'WatchdogsRun'
depends = 'vim-quickrun'
hook_source = '''
let g:watchdogs_check_BufWritePost_enable_on_wq = 0
let g:watchdogs_check_BufWritePost_enable = 1

let g:watchdogs_check_BufWritePost_enables = {
\   "php" : 1,
\   "python" : 1,
\   "vim" : 1,
\}

let g:watchdogs_check_CursorHold_enable = 0

let g:watchdogs_check_CursorHold_enables = {
\   "php" : 0,
\   "vim" : 0,
\   "python" : 0,
\}

let g:quickrun_config["watchdogs_checker/_"] = {
\       "hook/close_quickfix/enable_exit" : 0,
      \ }

if !exists("g:quickrun_config")
    let g:quickrun_config = {}
endif

call watchdogs#setup(g:quickrun_config)
'''

[[plugins]]
repo = 'cohama/vim-hier'
if = "!has('nvim')"
on_source = ['vim-watchdogs']

# [[plugins]]
# repo = 'dhruvasagar/vim-table-mode'
# on_ft = 'txt'

[[plugins]]
repo = 'kannokanno/previm'
depends = 'open-browser.vim'
on_ft = 'markdown'
hook_source = 'nnoremap [file]p :<C-u>PrevimOpen<CR>'

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'
hook_add = '''
nnoremap [exec]ci :<C-u>Capture<Space>
nnoremap [exec]cm :<C-u>Capture messages<CR>
nnoremap [exec]cs :<C-u>call notomo#vimrc#syntax_report()<CR>
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_source = '''
let g:vim_markdown_no_default_key_mappings = 1
let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'notomo/vim-operator-search'
depends = ['vim-operator-user', 'vim-textobj-function', 'incsearch.vim']
on_map = {nx = '<Plug>(operator-search'}
hook_add = '''
nmap <Leader>sj <Plug>(operator-search-word)af
nmap <Leader>s<Space>j <Plug>(operator-search-register)af
nmap <Leader>sJ <Plug>(operator-search)af
nmap <Leader>S <Plug>(operator-search)
'''

[[plugins]]
repo = 'kana/vim-textobj-function'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>(textobj-function-'}
hook_add = '''
omap af <Plug>(textobj-function-a)
omap if <Plug>(textobj-function-i)
vmap af <Plug>(textobj-function-a)
vmap if <Plug>(textobj-function-i)
'''
hook_source = 'let g:textobj_function_no_default_key_mappings = 1'

[[plugins]]
repo = 'thinca/vim-textobj-function-javascript'
depends = 'vim-textobj-function'
on_ft = 'javascript'

# [[plugins]]
# repo = 'Shougo/echodoc.vim'
# on_event = 'CompleteDone'
# hook_source = 'call echodoc#enable()'

[[plugins]]
repo = 'kana/vim-altr'
on_map = {n = '<Plug>'}
hook_add = '''
nmap [file]f <Plug>(altr-forward)
nmap [file]b <Plug>(altr-back)
'''
hook_post_source = '''
call altr#define('lazy.toml', 'eager.toml')
call altr#define('autoload/%.vim', 'plugin/%.vim')
'''

[[plugins]]
repo = 'notomo/vim-better-tag-jump'
on_func = 'bettertagjump#php#Jump'

[[plugins]]
repo = 'kana/vim-gf-user'
on_map = {n = '<Plug>(gf-user-gf)'}
hook_add = '''
nmap [keyword]f <Plug>(gf-user-gf)
nmap [keyword]l <Plug>(gf-user-<C-w><C-f>)
'''
hook_source = '''
let g:gf_user_no_default_key_mappings = 1
'''

[[plugins]]
repo = 'sgur/vim-gf-autoload'
on_source = ['vim-gf-user']

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {nv = '<Plug>(jplus'}
hook_add = '''
nmap [edit]j <Plug>(jplus)
vmap [edit]j <Plug>(jplus)
nmap [edit]J <Plug>(jplus-input)
vmap [edit]J <Plug>(jplus-input)
'''

[[plugins]]
repo = 'fuenor/im_control.vim'
on_event = 'InsertEnter'
hook_source = 'let g:IM_CtrlMode = 4'

[[plugins]]
repo = 'w0rp/ale'
if = "has('nvim')"
on_ft = ['vim', 'python', 'php', 'sh', 'go', 'c', 'help', 'cs']
hook_source = 'source ~/.vim/rc/plugins/ale.vim'

[[plugins]]
repo = 'janko-m/vim-test'
on_cmd = ['TestNearest', 'TestFile', 'TestSuite', 'TestLast', 'TestVisit']
on_ft = ['vim', 'php']
hook_add = '''
nnoremap [test] <Nop>
nmap <Leader>t [test]
nnoremap [test]n :<C-u>TestNearest<CR>
nnoremap [test]f :<C-u>TestFile<CR>
nnoremap [test]s :<C-u>TestSuite<CR>
nnoremap [test]t :<C-u>TestLast<CR>
nnoremap [test]v :<C-u>TestVisit<CR>
'''
hook_source = 'source ~/.vim/rc/plugins/vim-test.vim'
hook_post_source = '''
let g:test#runners['PHP'] = ['PHPUnit']
'''

[[plugins]]
repo = 'xolox/vim-misc'

[[plugins]]
repo = 'xolox/vim-session'
depends = 'vim-misc'
on_cmd = ['SaveSession', 'OpenSession']
hook_add = '''
nnoremap [file]<Space> :<C-u>SaveSession<CR>
nnoremap [file]<CR> :<C-u>OpenSession<CR>
let g:session_autoload = 'no'
let g:session_autosave = 'no'
let g:session_autosave_periodic = 0
'''

[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
on_ft = 'cpp'

[[plugins]]
repo = 'OmniSharp/omnisharp-vim'
on_ft = 'cs'
build = 'xbuild server/OmniSharp.sln'
hook_add = '''
let g:OmniSharp_host = 'http://localhost:2000'
'''
