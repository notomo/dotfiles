
[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = {nox = '<Plug>'}
hook_add = 'source ~/.vim/rc/plugins/easymotion.vim'
hook_source = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_move_highlight = 1
let g:EasyMotion_landing_highlight = 0
let g:EasyMotion_inc_highlight = 1
let g:EasyMotion_keys = 'asdghklqwertyuopzxcvbnmf;,./0'
'''

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
omap ae <Plug>(textobj-entire-a)
omap ie <Plug>(textobj-entire-i)
xmap ae <Plug>(textobj-entire-a)
xmap ie <Plug>(textobj-entire-i)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
omap aj <Plug>(textobj-multiblock-a)
omap ij <Plug>(textobj-multiblock-i)
xmap aj <Plug>(textobj-multiblock-a)
xmap ij <Plug>(textobj-multiblock-i)
'''
hook_source = '''
let g:textobj_multiblock_blocks = [
\   [ "(", ")" ],
\   [ "[", "]" ],
\   [ "{", "}" ],
\   [ '<', '>' ],
\   [ '"', '"'],
\   [ "'", "'"],
\   [ "`", "`", 1],
\]
'''

[[plugins]]
repo = 'osyo-manga/vim-operator-blockwise'
depends = ['vim-operator-user', 'vim-textobj-blockwise']
on_map = {n = '<Plug>'}
hook_add = '''
nmap [operator]c <Plug>(operator-blockwise-change)
nmap [operator]d <Plug>(operator-blockwise-delete)
nmap [operator]y <Plug>(operator-blockwise-yank)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-blockwise'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
xmap ag <Plug>(textobj-line-a)
xmap ig <Plug>(textobj-line-i)
omap ag <Plug>(textobj-line-a)
omap ig <Plug>(textobj-line-i)
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = {nx = '<Plug>(openbrowser-'}
on_cmd = 'OpenBrowser'
hook_add = '''
nnoremap [browser] <Nop>
nmap [exec]b [browser]
xnoremap [browser] <Nop>
xmap [exec]b [browser]

nmap [browser]s <Plug>(openbrowser-search)
xmap [browser]s <Plug>(openbrowser-search)
nnoremap [browser]o :<C-u>call _open_browser(expand('<cWORD>'))<CR>
nnoremap [browser]i :<C-u>OpenBrowserSearch<Space>
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = {nox = '<Plug>(incsearch-'}
hook_add = '''
map / <Plug>(incsearch-easymotion-/)\v
map <Space>/k <Plug>(incsearch-easymotion-?)
map <Space>/j <Plug>(incsearch-easymotion-stay)

nmap s/ <Plug>(incsearch-easymotion-/)<C-r><C-w>
nmap sk <Plug>(incsearch-easymotion-?)<C-r><C-w>
nmap sj <Plug>(incsearch-easymotion-stay)<C-r><C-w>
noremap <expr> s. incsearch#go({'pattern': histget('/', -1)})

nmap s<Space>/ <Plug>(incsearch-easymotion-/)<C-r>"
nmap s<Space>k <Plug>(incsearch-easymotion-?)<C-r>"
nmap s<Space>j <Plug>(incsearch-easymotion-stay)<C-r>"

map n <Plug>(incsearch-nohl-n)
map N <Plug>(incsearch-nohl-N)
nmap n <Plug>(incsearch-nohl)<Plug>(anzu-n-with-echo)
nmap N <Plug>(incsearch-nohl)<Plug>(anzu-N-with-echo)

omap <silent> ra <Plug>(incsearch-forward)\v[[({<"']\zs[^[({<"']{-}%#<CR>
omap <silent> rA <Plug>(incsearch-forward)\v[[({<"']\zs.{-}%#<CR>
'''
hook_post_source = '''
let g:incsearch#auto_nohlsearch = 1
IncSearchNoreMap <Tab> <Over>(incsearch-next)
IncSearchNoreMap <S-Tab> <Over>(incsearch-prev)
IncSearchNoreMap <C-Space> <Tab>
IncSearchNoreMap <C-j> <Down>
IncSearchNoreMap <C-k> <Up>
IncSearchNoreMap <C-l> <Right>
IncSearchNoreMap <Space> <CR>
IncSearchNoreMap <S-Space> <Space>
IncSearchNoreMap <C-n> <Over>(incsearch-scroll-f)
IncSearchNoreMap <C-p> <Over>(incsearch-scroll-b)
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = {n = '<Plug>(anzu-n-with-echo)'}

[[plugins]]
repo = 'sgur/vim-py3diff'
if = "has('python3')"
hook_add = 'set diffexpr=py3diff#diffexpr()'

[[plugins]]
repo = 'haya14busa/incsearch-easymotion.vim'
depends = ['incsearch.vim', 'vim-easymotion']
on_map = {nox = '<Plug>(incsearch-easymotion-'}

[[plugins]]
repo = 'bkad/CamelCaseMotion'
on_map = {nox = '<Plug>CamelCaseMotion_'}
hook_add = '''
map <Leader>w <Plug>CamelCaseMotion_w
map <Leader>b <Plug>CamelCaseMotion_b
map <Leader>e <Plug>CamelCaseMotion_e
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
nmap r <Plug>(operator-replace)
xmap r <Plug>(operator-replace)
onoremap <Plug>(builtin-gn) gn
nnoremap <Plug>(builtin-/) /
nmap [edit]n *``<Plug>(operator-replace)<Plug>(builtin-gn)
xmap <expr> [edit]n "\"ry<Plug>(builtin-/)\\V\<C-r>=notomo#vimrc#escape_search_pattern(@r)\<CR>\<CR>" . "``\"+<Plug>(operator-replace)<Plug>(builtin-gn)"
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-from_regexp'
depends = 'vim-textobj-user'
on_func = ['textobj#from_regexp#mapexpr']
hook_add = '''
omap <expr> pd textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+')
xmap <expr> pd textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+')
omap <expr> py textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+->')
xmap <expr> py textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+->')

omap <expr> iz textobj#from_regexp#mapexpr('\d\{4}-\d\{2}-\d\{2} \d\{2}:\d\{2}:\d\{2}')
xmap <expr> iz textobj#from_regexp#mapexpr('\d\{4}-\d\{2}-\d\{2} \d\{2}:\d\{2}:\d\{2}')

omap <expr> is textobj#from_regexp#mapexpr('_\zs.\{-}\ze_')
xmap <expr> is textobj#from_regexp#mapexpr('_\zs.\{-}\ze_')
omap <expr> as textobj#from_regexp#mapexpr('_.\{-1,}\(_\)\@=')
xmap <expr> as textobj#from_regexp#mapexpr('_.\{-1,}\(_\)\@=')

omap <expr> i, textobj#from_regexp#mapexpr(',\zs.\{-}\ze,')
xmap <expr> i, textobj#from_regexp#mapexpr(',\zs.\{-}\ze,')
omap <expr> a, textobj#from_regexp#mapexpr(',.\{-1,}\(,\)\@=')
xmap <expr> a, textobj#from_regexp#mapexpr(',.\{-1,}\(,\)\@=')

omap <expr> i. textobj#from_regexp#mapexpr('\.\zs.\{-}\ze\.')
xmap <expr> i. textobj#from_regexp#mapexpr('\.\zs.\{-}\ze\.')
omap <expr> a. textobj#from_regexp#mapexpr('\..\{-1,}\(\.\)\@=')
xmap <expr> a. textobj#from_regexp#mapexpr('\..\{-1,}\(\.\)\@=')

omap <expr> ix textobj#from_regexp#mapexpr('\v\*\zs[^*]+\ze\*')
xmap <expr> ix textobj#from_regexp#mapexpr('\v\*\zs[^*]+\ze\*')
omap <expr> ax textobj#from_regexp#mapexpr('\*.\{-1,}\(*\)\@=')
xmap <expr> ax textobj#from_regexp#mapexpr('\*.\{-1,}\(*\)\@=')

omap <expr> i/ textobj#from_regexp#mapexpr('/\zs.\{-}\ze/')
xmap <expr> i/ textobj#from_regexp#mapexpr('/\zs.\{-}\ze/')
omap <expr> a/ textobj#from_regexp#mapexpr('/.\{-1,}\(/\)\@=')
xmap <expr> a/ textobj#from_regexp#mapexpr('/.\{-1,}\(/\)\@=')

omap <expr> rl textobj#from_regexp#mapexpr('\v%#[^])}>"'']*')
omap <expr> rL textobj#from_regexp#mapexpr('\v%#.*\ze[])}>"'']')
'''

[[plugins]]
repo = 'tyru/current-func-info.vim'
on_func = ['cfi#format']

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = ['vim-operator-user', 'vim-textobj-multiblock']
on_map = {nox = '<Plug>'}
hook_add = '''
noremap [surround] <Nop>
nmap s [surround]
xnoremap [surround] <Nop>
xmap s [surround]
nmap <silent>[surround]a <Plug>(operator-surround-append)
xmap <silent>[surround]a <Plug>(operator-surround-append)
xmap <silent>[surround]d v<Plug>(textobj-multiblock-a)<Plug>(operator-surround-delete)
xmap <silent>[surround]d <Plug>(operator-surround-delete)
nmap <silent>[surround]r v<Plug>(textobj-multiblock-a)<Plug>(operator-surround-replace)
xmap <silent>[surround]r <Plug>(operator-surround-replace)
'''
hook_source = 'source ~/.vim/rc/plugins/operator-surround.vim'

[[plugins]]
repo = 'h1mesuke/vim-alignta'
on_cmd = 'Alignta'
hook_add = '''
xnoremap [alignta] <Nop>
xmap <Leader>a [alignta]
xnoremap [alignta]i :<C-u>'<,'>Alignta =><CR>
xnoremap [alignta]e :<C-u>'<,'>Alignta =<CR>
xnoremap [alignta], :<C-u>'<,'>Alignta ,<CR>
xnoremap [alignta]c :<C-u>'<,'>Alignta :<CR>
xnoremap [alignta]p :<C-u>'<,'>Alignta )<CR>
xnoremap [alignta]<Space> :<C-u>'<,'>Alignta <<0 \ <CR>
'''

[[plugins]]
repo = 'lilydjwg/colorizer'
on_ft = ['javascript', 'css', 'html', 'vim']
on_cmd = 'ColorToggle'
hook_add = 'nnoremap [exec]C :<C-u>ColorToggle<CR>'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
on_ft = ['cs']
hook_add = '''
nnoremap <silent> <Leader>Q :<C-u>call notomo#quickrun#execute()<CR>
xnoremap <silent> <Leader>Q :QuickRun -mode v<CR>
'''
hook_source = 'source ~/.vim/rc/plugins/quickrun.vim'

[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
nmap <Space>c <Plug>(caw:hatpos:toggle)
xmap <Space>c <Plug>(caw:hatpos:toggle)
nmap <Space><Space>c <Plug>(caw:wrap:toggle)
xmap <Space><Space>c <Plug>(caw:wrap:toggle)
'''
hook_source = 'let g:caw_no_default_keymappings = 1'

[[plugins]]
repo = 'thinca/vim-ref'
on_map = {n = '<Plug>'}
hook_add = '''
nmap [keyword]r <Plug>(ref-keyword)
nnoremap <expr> [keyword]R ":<C-u>Ref webdict " . expand("<cword>") . "<CR>"
nnoremap <expr> [keyword]<C-r> ":<C-u>Ref webdict english " . expand("<cword>") . "<CR>"
'''
hook_source = '''
let g:ref_open = 'vsplit'
let g:ref_use_vimproc = 1
let g:ref_phpmanual_path = expand("~/.vim/reference/phpmanual")
let g:ref_pydoc_cmd = 'python3.5 -m pydoc'
let g:ref_source_webdict_sites = {
    \ 'english': {
        \ 'url': 'http://dictionary.infoseek.ne.jp/jeword/%s',
    \ },
    \ 'japanese': {
        \ 'url': 'http://dictionary.infoseek.ne.jp/ejword/%s',
    \ },
\ }
let g:ref_source_webdict_sites.default = 'japanese'
'''

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_if = 1

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_cmd = 'Switch'
hook_add = 'nnoremap [edit]s :<C-u>Switch<CR>'
hook_source = '''
let g:switch_mapping = ""

let g:switch_custom_definitions = [
\   {
\     '\<[a-z0-9]\+_\k\+\>': {
\       '_\(.\)' : '\U\1'
\     },
\     '\<[a-z0-9]\+[A-Z]\k\+\>': {
\       '\([A-Z]\)' : '_\l\1'
\     },
\   },
\ ]

autocmd MyAuGroup FileType php let b:switch_custom_definitions =
\ [
\   {
\     '\$this->\(\k\+\)' : 'self::$\1',
\     'self::\$\(\k\+\)' : '$\1',
\     '\$\(\k\+\)' : '$this->\1',
\   },
\   ['private', 'protected', 'public'],
\ ]

autocmd MyAuGroup FileType sql let b:switch_custom_definitions =
\ [
\   switch#NormalizedCase(['inner', 'left'])
\ ]

autocmd MyAuGroup FileType vim,toml let b:switch_custom_definitions =
\ [
\   {
\     '\v(\w)?map' : '\1noremap',
\     '\v(\w)?noremap' : '\1map',
\   },
\ ]

autocmd MyAuGroup FileType toml let b:switch_custom_definitions +=
\ [
\   ['hook_add', 'hook_source', 'hook_post_source'],
\ ]

'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = 'Linediff'
hook_add = 'xnoremap [diff]l :Linediff<CR>'

[[plugins]]
repo = 'mhinz/vim-signify'
on_cmd = 'Signify'
on_map = {n = '<plug>(signify-'}
hook_add = '''
nmap [git]j <Plug>(signify-next-hunk)zz
nmap [git]k <Plug>(signify-prev-hunk)zz
nnoremap [git]h :<C-u>SignifyToggleHighlight<CR>
nnoremap [git]t :<C-u>SignifyToggle<CR>
'''
hook_source = 'let g:signify_disable_by_default = 0'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'tmhedberg/matchit'
on_ft = ['html', 'smarty', 'vim', 'sql', 'php']

[[plugins]]
repo = 'haya14busa/vim-operator-flashy'
on_map = {nox = '<Plug>'}
hook_add = '''
map y <Plug>(operator-flashy)
nmap Y <Plug>(operator-flashy)$
'''
hook_source = 'let g:operator#flashy#flash_time = 100'

[[plugins]]
repo = 't9md/vim-choosewin'
on_map = {n = '<Plug>'}
hook_add = 'nmap m<Space> <Plug>(choosewin)'
hook_source = '''
let g:choosewin_overlay_enable = 1
let g:choosewin_overlay_clear_multibyte = 1
let g:choosewin_tabline_replace = 0

let g:choosewin_color_overlay = {
      \ 'gui': ['DodgerBlue3', 'DodgerBlue3' ],
      \ 'cterm': [ 25, 25 ]
      \ }
let g:choosewin_color_overlay_current = {
      \ 'gui': ['firebrick1', 'firebrick1' ],
      \ 'cterm': [ 124, 124 ]
      \ }

let g:choosewin_label = 'ASKLWEZXCPIHFRTYUVNMQGODB'
let g:choosewin_blink_on_land      = 0
let g:choosewin_statusline_replace = 0
'''

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'
hook_add = '''
nnoremap [exec]ci :<C-u>Capture<Space>
nnoremap [exec]cm :<C-u>Capture messages<CR>
nnoremap [exec]cv :<C-u>Capture version<CR>
nnoremap [exec]cs :<C-u>call notomo#vimrc#syntax_report()<CR>
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_source = '''
let g:vim_markdown_no_default_key_mappings = 1
let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'kana/vim-textobj-function'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>(textobj-function-'}
hook_add = '''
omap af <Plug>(textobj-function-a)
omap if <Plug>(textobj-function-i)
xmap af <Plug>(textobj-function-a)
xmap if <Plug>(textobj-function-i)
'''
hook_source = 'let g:textobj_function_no_default_key_mappings = 1'

[[plugins]]
repo = 'thinca/vim-textobj-function-javascript'
depends = 'vim-textobj-function'
on_ft = 'javascript'

[[plugins]]
repo = 'kana/vim-altr'
on_map = {n = '<Plug>'}
hook_add = '''
nmap [file]f <Plug>(altr-forward)
nmap [file]b <Plug>(altr-back)
nnoremap [file]t :<C-u>call notomo#window#duplicate()<CR>:call altr#forward()<CR>
nnoremap [test]e :<C-u>call notomo#altr#new()<CR>
'''
hook_post_source = '''
call altr#define('lazy.toml', 'eager.toml')
call altr#define('neovim_lazy.toml', 'neovim_eager.toml')
call altr#define('%/autoload/%.vim', '%/test/autoload/%.vim')
call altr#define('%/plugin/%.vim', '%/test/plugin/%.vim')
call altr#define('%.go', '%_test.go')
call altr#define('autoload/notomo/%.vim', 'rc/plugins/%.vim')
call altr#define('test/rplugin/%/test_%.py', 'rplugin/%/%.py')
'''

[[plugins]]
repo = 'notomo/vim-better-tag-jump'
on_func = 'bettertagjump#php#Jump'

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {nv = '<Plug>(jplus'}
hook_add = '''
nmap [edit]j <Plug>(jplus)
xmap [edit]j <Plug>(jplus)
nmap [edit]J <Plug>(jplus-input)
xmap [edit]J <Plug>(jplus-input)
'''

[[plugins]]
repo = 'fuenor/im_control.vim'
on_event = 'InsertEnter'
hook_source = 'let g:IM_CtrlMode = 4'

[[plugins]]
repo = 'haya14busa/vim-edgemotion'
on_map = {nox = '<Plug>'}
hook_add = '''
map gJ <Plug>(edgemotion-j)
map gK <Plug>(edgemotion-k)
'''

[[plugins]]
repo = 'cocopon/colorswatch.vim'
hook_add = 'nnoremap [exec]co :<C-u>ColorSwatchGenerate<CR>'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertCharPre'
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''
hook_source = 'source ~/.vim/rc/plugins/deoplete.vim'

[[plugins]]
repo = 'rhysd/clever-f.vim'
on_map = {nox = '<Plug>'}
hook_add = '''
let g:clever_f_across_no_line = 1
let g:clever_f_mark_char = 0
let g:clever_f_not_overwrites_standard_mappings = 1
let g:clever_f_chars_match_any_signs = ';'
nmap f <Plug>(clever-f-f)
xmap f <Plug>(clever-f-f)
omap f <Plug>(clever-f-f)
nmap F <Plug>(clever-f-F)
xmap F <Plug>(clever-f-F)
omap F <Plug>(clever-f-F)
'''
