hook_add = '''

nnoremap [exec] <Nop>
nmap <Space>x [exec]
vnoremap [exec] <Nop>
vmap <Space>x [exec]
nnoremap [keyword] <Nop>
nmap <Space>k [keyword]
nnoremap [diff] <Nop>
nmap <Leader>d [diff]
vnoremap [diff] <Nop>
vmap <Leader>d [diff]
nnoremap [edit] <Nop>
nmap <Space>e [edit]
vnoremap [edit] <Nop>
vmap <Space>e [edit]
nnoremap [file] <Nop>
nmap <Space>f [file]
noremap [operator] <Nop>
map <Space><Leader> [operator]
nnoremap [git] <Nop>
nmap <Leader>g [git]
vnoremap [git] <Nop>
vmap <Leader>g [git]

let g:plugin_dicwin_disable    = 1
let g:loaded_gzip              = 1
let g:loaded_tar               = 1
let g:loaded_tarPlugin         = 1
let g:loaded_zip               = 1
let g:loaded_zipPlugin         = 1
let g:loaded_rrhelper          = 1
let g:loaded_2html_plugin      = 1
let g:loaded_vimball           = 1
let g:loaded_vimballPlugin     = 1
let g:loaded_getscript         = 1
let g:loaded_getscriptPlugin   = 1
let g:loaded_netrw             = 1
let g:loaded_netrwPlugin       = 1
let g:loaded_netrwSettings     = 1
let g:loaded_netrwFileHandlers = 1
let g:loaded_spellfile_plugin  = 1
let g:loaded_logiPat           = 1

augroup MyAuGroup
    autocmd!
augroup END

autocmd MyAuGroup BufNewFile,BufRead * set iminsert=0
autocmd MyAuGroup BufNewFile * set fileencoding=UTF-8 fileformat=unix

if has('gui') && has('win32') && !has('nvim')
    autocmd MyAuGroup GUIEnter * simalt ~x
endif

autocmd MyAuGroup BufEnter * call s:auto_cd()
function! s:auto_cd() abort
    try
        execute ':lcd ' . substitute(expand('%:p:h'),' ','\\\\ ','g')
    catch
    endtry
endfunction

autocmd MyAuGroup VimEnter * if @% == '' && s:get_buf_byte() == 0 | setlocal buftype=nofile noswapfile fileformat=unix | endif
function! s:get_buf_byte()
    let byte = line2byte(line('$') + 1)
    return byte == -1 ? 0 : byte - 1
endfunction

function! s:define_highlight() abort
    highlight Search cterm=NONE guifg=#333333 guibg=#a9dd9d
    highlight incSearchOnCursor cterm=NONE guifg=#fffeeb guibg=#fb8965
    highlight Flashy term=bold ctermbg=0 guifg=#333333 guibg=#a8d2eb
    highlight ParenMatch term=underline cterm=underline guibg=#5f8770
    highlight TabLine guifg=#fff5ee guibg=#536273 gui=none
    highlight YankRoundRegion guifg=#333333 guibg=#fedf81
    highlight def link sqlStatement sqlKeyword
    highlight ZenSpace term=underline ctermbg=DarkGreen guibg=#ab6560
endfunction

autocmd MyAuGroup ColorScheme * :call s:define_highlight()

set guioptions+=M

'''

[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
nmap [exec]d [dein]
nnoremap [dein]c :<C-u>call dein#clear_state()<CR>
nnoremap [dein]r :<C-u>call dein#recache_runtimepath()<CR>
nnoremap [dein]u :<C-u>call dein#update()
nnoremap [dein]U :<C-u>call dein#remote_plugins()<CR>
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = '''
let g:loaded_matchparen = 1
'''

[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
let g:submode_keep_leaving_key = 1
let g:submode_timeout = 0
'''

[[plugins]]
repo = 'thinca/vim-singleton'
if = "has('clientserver')"
hook_post_source = '''
call singleton#enable()
'''

[[plugins]]
repo = 'thinca/vim-zenspace'
hook_add = '''
let g:zenspace#default_mode = 'on'
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap [fugit] <Nop>
nmap <Space>g [fugit]

nnoremap [fugit]d :<C-u>Gvdiff<CR>
nnoremap [fugit]s :<C-u>Gstatus<CR>:only<CR>
nnoremap [fugit]l :<C-u>tabe %<CR>:Glog \| copen<CR>
'''
hook_post_source = '''
set statusline+=%{exists('g:loaded_fugitive')?fugitive#statusline():''}
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
let g:yankround_use_region_hl = 1
nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]]
repo = 'Shougo/neco-vim'
hook_add = '''
if !exists('g:necovim#complete_functions')
    let g:necovim#complete_functions = {}
endif
let g:necovim#complete_functions.Ref = 'ref#complete'
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = "has('lua') && !has('nvim')"
hook_add = 'source ~/.vim/rc/plugins/neocomplete.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = 'neosnippet-snippets'
hook_add = '''
xmap <Space>S <Plug>(neosnippet_expand_target)
nnoremap [file]s :<C-u>:NeoSnippetEdit<CR>
imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
let g:neosnippet#snippets_directory = '~/.vim/snippets/'
let g:neosnippet#disable_runtime_snippets = {'_' : 1}
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'vim-jp/vital.vim'

[[plugins]]
repo = 'kana/vim-smartword'
hook_add = '''
map w <Plug>(smartword-w)
map b <Plug>(smartword-b)
map e <Plug>(smartword-e)
'''

# [[plugins]]
# repo = 'itchyny/lightline.vim'
# hook_add = 'source ~/.vim/rc/plugins/lightline.vim'

[[plugins]]
repo = 'rhysd/vim-color-spring-night'
hook_add = '''
let g:spring_night_kill_italic = 1
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
if = "has('nvim')"

[[plugins]]
repo = 'vim-scripts/gitignore.vim'

[[plugins]]
repo = 'jwalton512/vim-blade'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'vim-qfreplace'
hook_add = '''
nnoremap [unite] <Nop>
nmap <Space>u [unite]

nnoremap <silent> [unite]n :<C-u>UniteNext<CR>
nnoremap <silent> [unite]N :<C-u>UnitePrevious<CR>
nnoremap [unite]F :<C-u>UniteWithBufferDir -buffer-name=files file -input=
nnoremap <silent> [unite]p :<C-u>Unite bookmark<CR>
nnoremap <silent> [unite]<Space> :<C-u>UniteBookmarkAdd<CR>
nnoremap <silent> [unite]ta :<C-u>Unite tab:no-current<CR>
nnoremap <silent> [unite]mp :<C-u>Unite mapping<CR>
nnoremap <silent> [unite]R :<C-u>Unite runtimepath<CR>
nnoremap <silent> [unite]<CR> :<C-u>UniteResume<CR>
'''
hook_post_source = 'source ~/.vim/rc/plugins/unite.vim'

[[plugins]]
repo = 'Shougo/unite-outline'
hook_add = 'nnoremap <silent> [unite]o :<C-u>Unite outline<CR>'

[[plugins]]
repo = 'kmnk/vim-unite-giti'
hook_add = '''
nnoremap <silent> [unite]gb :<C-u>Unite giti/branch<CR>
nnoremap <silent> [unite]gB :<C-u>Unite giti/branch_all<CR>
nnoremap <silent> [unite]gc :<C-u>Unite giti/config<CR>
nnoremap <silent> [unite]gl :<C-u>Unite giti/log<CR>
nnoremap <silent> [unite]gs :<C-u>Unite giti/status<CR>
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
hook_add = '''
nnoremap <silent> [exec]f :<C-u>VimFilerBufferDir -no-quit -split -toggle<CR>
let g:vimfiler_enable_auto_cd = 1
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_ignore_pattern = ['^\.DS_Store$']
let g:vimfiler_no_default_key_mappings = 1
'''
hook_post_source = 'source ~/.vim/rc/plugins/vimfiler.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'
hook_add = '''
nnoremap <silent> [unite]r :<C-u>Unite file_mru<CR>
nnoremap <silent> [unite]u :<C-u>Unite file_mru -force-immediately<CR>
nnoremap <silent> [unite]d :<C-u>Unite directory_mru<CR>
let g:neomru#file_mru_limit = 1000
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
hook_add = 'nnoremap [exec]Q :<C-u>Qfreplace<CR>'

[[plugins]]
repo = 'evanmiller/nginx-vim-syntax'

[[plugins]]
repo = 'junegunn/fzf.vim'
if = "has('nvim')"
hook_add = 'source ~/.vim/rc/plugins/fzf.vim'

[[plugins]]
repo = 'junegunn/vader.vim'

