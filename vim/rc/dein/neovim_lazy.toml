
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'
hook_source = '''
if has('mac')
    let g:deoplete#sources#jedi#python_path = '/usr/local/bin/python3'
else
    let g:deoplete#sources#jedi#python_path = '/usr/bin/python3'
endif
'''

[[plugins]]
repo = 'zchee/deoplete-go'
on_ft = 'go'
build = 'make'
hook_source = '''
if has('win32')
    let g:deoplete#sources#go#gocode_binary = $GOPATH . '\bin\gocode.exe'
else
    let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
endif
'''

[[plugins]]
repo = 'fszymanski/deoplete-emoji'
on_ft = 'markdown'
hook_add = '''
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'

[[plugins]]
repo = 'ujihisa/neco-look'
if = "executable('look')"

[[plugins]]
repo = 'zchee/deoplete-clang'
on_ft = 'c'
hook_add = '''
let g:deoplete#sources#clang#libclang_path = '/usr/lib64/llvm/libclang.so'
let g:deoplete#sources#clang#clang_header = '/usr/lib/clang'
'''

[[plugins]]
repo = 'OmniSharp/omnisharp-vim'
if = "has('python2')"
on_ft = 'cs'
build = 'xbuild server/OmniSharp.sln'
hook_add = '''
let g:OmniSharp_start_without_solution = 0
let g:OmniSharp_typeLookupInPreview = 0
let g:Omnisharp_start_server = 0
'''

[[plugins]]
repo = 'autozimu/deoplete-omnisharp'
if = "has('python2')"
depends = ['omnisharp-vim']
on_ft = 'cs'
hook_add = '''
let g:OmniSharp_host='http://localhost:2000'
'''
[[plugins]]
repo = 'mhartington/nvim-typescript'
build = './install.sh'
on_ft = 'typescript'

# [[plugins]]
# repo = 'dbgx/lldb.nvim'
# on_ft = ['c', 'cpp']
# hook_add = '''
# '''

# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# on_ft = ['php' 'python', 'go', 'javascript', 'lua', 'rust', 'haskell', 'vue']
# rev = 'next'
# build = './install.sh'
# depends = 'denite.nvim'
# on_source = 'deoplete.nvim'
# hook_add = '''
# nnoremap [lc] <Nop>
# nmap <Leader>f [lc]
# nnoremap <silent> [lc]d :<C-u>call LanguageClient_textDocument_definition()<CR>
# nnoremap <silent> [lc]r :<C-u>call LanguageClient_textDocument_rename()<CR>
# nnoremap <silent> [lc]k :<C-u>call LanguageClient_textDocument_hover()<CR>
# nnoremap <silent> [denite]ld :<C-u>Denite documentSymbol<CR>
# nnoremap <silent> [denite]lw :<C-u>Denite workspaceSymbol<CR>
# nnoremap <silent> [denite]lr :<C-u>Denite references -auto-preview -immediately-1<CR>
# let g:LanguageClient_autoStart = 1
#
# let g:LanguageClient_serverCommands = {}
# " let g:LanguageClient_serverCommands['python'] = ['pyls']
# " let g:LanguageClient_serverCommands['javascript'] = ['javascript-typescript-stdio']
# " let g:LanguageClient_serverCommands['go'] = ['go-langserver', '-trace', '-logfile', '~/go_lsp.log']
# " let g:LanguageClient_serverCommands['lua'] = ['lua-lsp']
# " let g:LanguageClient_serverCommands['rust'] = ['rustup', 'run', 'nightly', 'rls']
# " let g:LanguageClient_serverCommands['haskell'] = ['hie', '--lsp']
# let g:LanguageClient_serverCommands['vue'] = ['vls']
#
# let g:LanguageClient_signColumnAlwaysOn = 0
# let g:LanguageClient_diagnosticsEnable = 0
#
# let g:LanguageClient_loggingLevel = 'INFO'
#
# '''

# [[plugins]]
# repo = 'roxma/LanguageServer-php-neovim'
# depends = 'LanguageClient-neovim'
# on_ft = 'php'
# build = 'composer install && composer run-script parse-stubs'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_post_update = 'GoInstallBinaries'
hook_source = '''
let g:go_auto_type_info = 0
let g:go_auto_sameids = 0
let g:go_doc_keywordprg_enabled = 0
let g:go_fmt_autosave = 0
let g:go_list_type = "quickfix"
let g:go_snippet_engine = ""
let g:go_gocode_unimported_packages = 1
let g:go_template_autocreate = 0
'''

[[plugins]]
repo = 'fntlnz/atags.vim'
hook_add = '''
let g:atags_build_commands_list = ['ctags -R .']
let g:atags_on_generate_stderr = 'notomo#vimrc#silent_handler'
let g:atags_on_generate_stdout = 'notomo#vimrc#silent_handler'
let g:atags_quiet = 1
'''

[[plugins]]
repo = 'kana/vim-filetype-haskell'
on_ft = 'haskell'

[[plugins]]
repo = 'notomo/curstr.nvim'
hook_add = '''
nnoremap <silent> [keyword]fo :<C-u>Curstr openable -action=open<CR>
nnoremap <silent> [keyword]ft :<C-u>Curstr openable -action=tab_open<CR>
nnoremap <silent> [keyword]fv :<C-u>Curstr openable -action=vertical_open<CR>
nnoremap <silent> [keyword]fh :<C-u>Curstr openable -action=horizontal_open<CR>
nnoremap <silent> [edit]s :<C-u>Curstr togglable<CR>
'''
hook_source = 'source ~/.vim/rc/plugins/curstr.vim'

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_ft = 'javascript'
hook_source = '''
let g:deoplete#sources#ternjs#timeout = 1
let g:deoplete#sources#ternjs#types = 1
let g:deoplete#sources#ternjs#depths = 1
let g:deoplete#sources#ternjs#docs = 1
let g:deoplete#sources#ternjs#omit_object_prototype = 0
let g:deoplete#sources#ternjs#include_keywords = 1
'''

[[plugins]]
repo = 'notomo/ctrlb.nvim'
build = 'npm run setup'
hook_add = '''
nnoremap <expr> [exec]cb ":\<C-u>CtrlbOpen -json-file=" . expand("~/dotfiles/vim/rc/plugins/ctrlb_layout.json") . "\<CR>"
'''
hook_source = 'source ~/.vim/rc/plugins/ctrlb.vim'

[[plugins]]
repo = 'cocopon/pgmnt.vim'
hook_add = '''
nnoremap [exec]h :<C-u>PgmntDevInspect<CR>
'''

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'OrangeT/vim-csharp'
on_ft = 'cs'

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['vim', 'python', 'php', 'sh', 'go', 'c', 'help', 'cs', 'lua', 'rust', 'dockerfile', 'javascript', 'typescript', 'json']
hook_source = 'source ~/.vim/rc/plugins/ale.vim'

[[plugins]]
repo = 'janko-m/vim-test'
on_cmd = 'Test'
on_ft = ['vim', 'php', 'python', 'typescript']
hook_add = '''
nnoremap [test]n :<C-u>TestNearest<CR>
nnoremap [test]f :<C-u>TestFile<CR>
nnoremap [test]s :<C-u>TestSuite<CR>
nnoremap [test]l :<C-u>TestLast<CR>
nnoremap [test]v :<C-u>TestVisit<CR>
nnoremap [test]C :<C-u>call notomo#vim_test#toggle_coverage()<CR>
'''
hook_source = 'source ~/.vim/rc/plugins/vim_test.vim'
hook_post_source = '''
if !exists('g:test#runners')
    let g:test#runners = {}
endif
let g:test#runners['PHP'] = ['PHPUnit']
let g:test#runners['Python'] = ['PyTest']
let g:test#runners['JavaScript'] = ['Jest']
let g:test#python#pytest#options = '-s'
let g:test#php#phpunit#options = '--no-coverage'
'''

[[plugins]]
repo = 'lambdalisue/session.vim'
on_cmd = 'Session'
hook_add = '''
nnoremap [file]<Space> :<C-u>call notomo#vimrc#save_session()<CR>
nnoremap [file]<CR> :<C-u>SessionOpen<CR>
nnoremap [denite]S :<C-u>Denite session<CR>
'''

[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
on_ft = 'cpp'

[[plugins]]
repo = 'tenfyzhong/CompleteParameter.vim'
on_ft = ['go', 'python', 'typescript']
hook_source = '''
let g:complete_parameter_py_keep_value = 1
let g:complete_parameter_echo_signature = 1
'''

[[plugins]]
repo = 'thinca/vim-template'
on_cmd = 'TemplateLoad'

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_ft = 'vue'

[[plugins]]
repo = 'Shougo/defx.nvim'
if = 'executable("python3.6")'
hook_source = 'source ~/.vim/rc/plugins/defx.vim'
