
[[plugins]]
repo = 'thinca/vim-unite-history'
on_source = 'unite.vim'

[[plugins]]
repo = 'tacroe/unite-mark'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite-help'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = 'unite.vim'

[[plugins]]
repo = 'tsukkee/unite-tag'
on_source = 'unite.vim'

[[plugins]]
repo = 'osyo-manga/unite-quickfix'
on_source = 'unite.vim'

[[plugins]]
repo = 'pasela/unite-webcolorname'
on_source = 'unite.vim'

[[plugins]]
repo = 'lambdalisue/unite-grep-vcs'
on_source = 'unite.vim'

[[plugins]]
repo = 'kmnk/vim-unite-giti'
on_source = 'unite.vim'
hook_add = 'source ~/.vim/rc/plugins/easymotion_mapping.vim'

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = {nox = '<Plug>'}
hook_add = 'source ~/.vim/rc/plugins/easymotion_mapping.vim'
hook_source = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_move_highlight = 1
let g:EasyMotion_landing_highlight = 0
let g:EasyMotion_inc_highlight = 1
let g:EasyMotion_keys = 'asdghklqwertyuopzxcvbnmf;,./0'
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
if = "!has('nvim')"
on_ft = 'python'
hook_source = '''
let g:jedi#completions_enabled = 1
let g:jedi#auto_vim_configuration = 0
let g:jedi#rename_command = '<Nop>'
let g:jedi#goto_assignments_command = '<Leader>dp'
let g:jedi#usages_command = '<Leader>du'
let g:jedi#popup_select_first = 0
let g:jedi#documentation_command='<Nop>'
let g:jedi#force_py_version = 3
let g:jedi#goto_command='<Nop>'
'''

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
omap ae <Plug>(textobj-entire-a)
omap ie <Plug>(textobj-entire-i)
vmap ae <Plug>(textobj-entire-a)
vmap ie <Plug>(textobj-entire-i)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
omap aj <Plug>(textobj-multiblock-a)
omap ij <Plug>(textobj-multiblock-i)
vmap aj <Plug>(textobj-multiblock-a)
vmap ij <Plug>(textobj-multiblock-i)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-blockwise'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}

[[plugins]]
repo = 'bps/vim-textobj-python'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
on_ft = 'python'
hook_add = '''
xmap <buffer> af <Plug>(textobj-python-function-a)
omap <buffer> af <Plug>(textobj-python-function-a)
xmap <buffer> if <Plug>(textobj-python-function-i)
omap <buffer> if <Plug>(textobj-python-function-i)
xmap <buffer> ac <Plug>(textobj-python-class-a)
omap <buffer> ac <Plug>(textobj-python-class-a)
xmap <buffer> ic <Plug>(textobj-python-class-i)
omap <buffer> ic <Plug>(textobj-python-class-i)
'''

[[plugins]]
repo = 'kana/vim-textobj-line'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}
hook_add = '''
vmap ah <Plug>(textobj-line-a)
vmap ih <Plug>(textobj-line-i)
omap ah <Plug>(textobj-line-a)
omap ih <Plug>(textobj-line-i)
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = {nx = '<Plug>(openbrowser-'}
on_cmd = 'OpenBrowser'
hook_add = '''
nnoremap [browser] <Nop>
nmap [exec]b [browser]
vnoremap [browser] <Nop>
vmap [exec]b [browser]

nmap [browser]s <Plug>(openbrowser-smart-search)
vmap [browser]s <Plug>(openbrowser-smart-search)
nmap [browser]o <Plug>(openbrowser-open)
vmap [browser]o <Plug>(openbrowser-open)
nnoremap [browser]i :<C-u>OpenBrowserSearch<Space>
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = {nox = '<Plug>(incsearch-'}
hook_add = '''
map / <Plug>(incsearch-easymotion-/)
nmap <Space>/ <Plug>(incsearch-easymotion-/)<C-r>"
nmap s/ <Plug>(incsearch-easymotion-/)<C-r><C-w>
map ssk <Plug>(incsearch-easymotion-?)
nmap <Space>sk <Plug>(incsearch-easymotion-?)<C-r>"
nmap sk <Plug>(incsearch-easymotion-?)<C-r><C-w>
map ssj <Plug>(incsearch-easymotion-stay)
nmap <Space>sj <Plug>(incsearch-easymotion-stay)<C-r>"
nmap sj <Plug>(incsearch-easymotion-stay)<C-r><C-w>
map   n <Plug>(incsearch-nohl-n)
map   N <Plug>(incsearch-nohl-N)
nmap  n <Plug>(incsearch-nohl)<Plug>(anzu-n-with-echo)
nmap  N <Plug>(incsearch-nohl)<Plug>(anzu-N-with-echo)
noremap <expr> s. incsearch#go({'pattern': histget('/', -1)})
'''
hook_post_source = '''
let g:incsearch#auto_nohlsearch = 1
IncSearchNoreMap <Tab> <Over>(incsearch-next)
IncSearchNoreMap <S-Tab>  <Over>(incsearch-prev)
IncSearchNoreMap <C-j> <Down>
IncSearchNoreMap <C-k> <Up>
IncSearchNoreMap <C-l> <Right>
IncSearchNoreMap <Space> <CR>
IncSearchNoreMap <S-Space> <Space>
IncSearchNoreMap <C-n>  <Over>(incsearch-scroll-f)
IncSearchNoreMap <C-p>    <Over>(incsearch-scroll-b)
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = {n = '<Plug>(anzu-n-with-echo)'}

[[plugins]]
repo = 'sgur/vim-py3diff'
on_cmd = 'Diff'

[[plugins]]
repo = 'tyru/restart.vim'
on_cmd = 'Restart'
hook_add = 'nnoremap <C-S-F4> :<C-u>Restart<CR>'
hook_source = '''
let g:restart_sessionoptions = 'curdir,help,tabpages'
'''

[[plugins]]
repo = 'haya14busa/incsearch-easymotion.vim'
depends = ['incsearch.vim', 'vim-easymotion']
on_map = {nox = '<Plug>(incsearch-easymotion-'}

[[plugins]]
repo = 'bkad/CamelCaseMotion'
on_map = {nox = '<Plug>CamelCaseMotion_'}
hook_add = '''
map <Leader>w <Plug>CamelCaseMotion_w
map <Leader>b <Plug>CamelCaseMotion_b
map <Leader>e <Plug>CamelCaseMotion_e
'''

[[plugins]]
repo = 'joonty/vdebug'
on_cmd = 'BreakpointRemove'
hook_add = '''
nnoremap [vdebug] <Nop>
nmap <Space>d [vdebug]
nnoremap [vdebug]a :<C-u>BreakpointRemove *<CR>
'''
hook_source = 'source ~/.vim/rc/plugins/vdebug_setting.vim'

[[plugins]]
repo = 'scrooloose/syntastic'
on_ft = ['python', 'php']
hook_add = '''
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_enable_signs = 1
let g:syntastic_auto_loc_list = 3
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['pyflakes']
let g:syntastic_php_checkers = ['php']
let g:syntastic_mode_map = { 'passive_filetypes': ['tex'] }
let g:syntastic_javascript_checker = "jshint"
'''

[[plugins]]
repo = 'fuenor/im_control.vim'
on_event = 'InsertEnter'

# [[plugins]]
# repo = 'LeafCage/qutefinger.vim'
# on_map = {n = '<Plug>'}
# hook_add = '''
# nnoremap [quickfix] <Nop>
# nmap <Space>x [quickfix]
# nmap [quickfix]c <Plug>(qutefinger-toggle-mode)
# nmap [quickfix]n <Plug>(qutefinger-next)
# nmap [quickfix]p <Plug>(qutefinger-prev)
# nmap [quickfix]x <Plug>(qutefinger-toggle-win)
# nmap [quickfix]f <Plug>(qutefinger-first)
# nmap [quickfix]l <Plug>(qutefinger-last)
# '''

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = 'map r <Plug>(operator-replace)'

[[plugins]]
repo = 'osyo-manga/vim-operator-exec_command'
depends = 'vim-operator-user'
on_func = ['operator#exec_command#mapexpr']
hook_add = '''
map <expr> <Space>eo operator#exec_command#mapexpr(":e %t")
map <expr> <Space>et operator#exec_command#mapexpr(":tab drop %t")
map <expr> <Space>eh operator#exec_command#mapexpr(":h %t")
map <expr> <Space>ev operator#exec_command#mapexpr(":Editvar %t")
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-from_regexp'
depends = 'vim-textobj-user'
on_func = ['textobj#from_regexp#mapexpr']
hook_add = '''
omap <expr> pd textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+')
xmap <expr> pd textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+')
omap <expr> py textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+->')
xmap <expr> py textobj#from_regexp#mapexpr('\$[a-zA-Z0-9_]\+->')

omap <expr> is textobj#from_regexp#mapexpr('_\zs.\{-}\ze_')
xmap <expr> is textobj#from_regexp#mapexpr('_\zs.\{-}\ze_')
omap <expr> as textobj#from_regexp#mapexpr('_.\{-1,}\(_\)\@=')
xmap <expr> as textobj#from_regexp#mapexpr('_.\{-1,}\(_\)\@=')

omap <expr> i<Space> textobj#from_regexp#mapexpr(' \zs.\{-}\ze ')
xmap <expr> i<Space> textobj#from_regexp#mapexpr(' \zs.\{-}\ze ')
omap <expr> a<Space> textobj#from_regexp#mapexpr(' .\{-1,}\( \)\@=')
xmap <expr> a<Space> textobj#from_regexp#mapexpr(' .\{-1,}\( \)\@=')

omap <expr> i/ textobj#from_regexp#mapexpr('/\zs.\{-}\ze/')
xmap <expr> i/ textobj#from_regexp#mapexpr('/\zs.\{-}\ze/')
omap <expr> a/ textobj#from_regexp#mapexpr('/.\{-1,}\(/\)\@=')
xmap <expr> a/ textobj#from_regexp#mapexpr('/.\{-1,}\(/\)\@=')
'''

[[plugins]]
repo = 'tyru/current-func-info.vim'
on_func = ['cfi#format']

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {nox = '<Plug>'}
hook_add = '''
noremap [surround] <Nop>
map s [surround]
map <silent>[surround]a <Plug>(operator-surround-append)
map <silent>[surround]d <Plug>(operator-surround-delete)
map <silent>[surround]r <Plug>(operator-surround-replace)
'''
hook_source = 'source ~/.vim/rc/plugins/operator-surround.vim'

[[plugins]]
repo = 'thinca/vim-fontzoom'
on_cmd = 'Fontzoom'
hook_add = '''
nnoremap <C-Up> :<C-u>Fontzoom+1<CR>
nnoremap <C-Down> :<C-u>Fontzoom-1<CR>
nnoremap <M-Down> :<C-u>Fontzoom!<CR>
nnoremap <M-Up> :<C-u>Fontzoom!<CR>
'''

[[plugins]]
repo = 'h1mesuke/vim-alignta'
on_cmd = 'Alignta'
hook_add = '''
vnoremap [alignta] <Nop>
vmap <Leader>a [alignta]
vnoremap [alignta]i :<C-u>'<,'>Alignta =><CR>
vnoremap [alignta]e :<C-u>'<,'>Alignta =<CR>
vnoremap [alignta], :<C-u>'<,'>Alignta ,<CR>
vnoremap [alignta]c :<C-u>'<,'>Alignta :<CR>
vnoremap [alignta]p :<C-u>'<,'>Alignta )<CR>
vnoremap [alignta]<Space> :<C-u>'<,'>Alignta <<0 \ <CR>
'''

[[plugins]]
repo = 'lilydjwg/colorizer'
on_ft = ['javascript', 'css', 'html', 'vim']
on_cmd = 'ColorToggle'
hook_add = '''
nnoremap <C-F1> :<C-u>ColorToggle<CR>
'''

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'
hook_add = '''
nnoremap <C-F2> :<C-u>Qfreplace<CR>
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = {n = '<Plug>'}
on_cmd = 'QuickRun'
hook_add = '''
nmap <silent> <Leader><S-q> <Plug>(quickrun)
vnoremap <silent> <Leader><S-q> :QuickRun -mode v<CR>
'''
hook_source = '''
let g:quickrun_config = {
\   "_" : {
\       "runner" : "vimproc",
\       "hook/output_encode/enable" : 1,
\       "hook/output_encode/encoding" : "cp932",
\       "hook/close_unite_quickfix/enable_hook_loaded" : 1,
\       "hook/unite_quickfix/enable_failure" : 1,
\       "hook/close_quickfix/enable_exit" : 1,
\       "hook/close_buffer/enable_failure" : 0,
\       "hook/close_buffer/enable_empty_data" : 1,
\       "outputter" : "multi:buffer:quickfix",
\       "outputter/buffer/split" : ":botright 8sp",
\       "runner/vimproc/updatetime" : 50,
\       "hook/inu/enable" : 1,
\       "hook/nu/wait" : 1,
\   },
\}
let g:quickrun_config['cpp'] = {
\   "type" : "cpp/clang-cl",
\}
let g:quickrun_config['cpp/clang-cl'] = {
\   'command': 'clang-cl',
\   'exec': ['%c %o %s /nologo /Fo%s:p:r.obj /Fe%s:p:r.exe > nul',
\            '%s:p:r.exe %a'],
\   'tempfile': '%{tempname()}.cpp',
\   'hook/sweep/files': ['%S:p:r.exe', '%S:p:r.obj'],
\   "hook/output_encode/encoding" : "utf-8",
\}
let g:quickrun_config['cs'] = {
\   "hook/output_encode/encoding" : "sjis",
\}
let g:quickrun_config['vim'] = {
\   "hook/output_encode/encoding" : "utf-8",
\}

'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
nmap <Space>c <Plug>(caw:hatpos:toggle)
vmap <Space>c <Plug>(caw:hatpos:toggle)
'''
hook_source = 'let g:caw_no_default_keymappings = 1'

[[plugins]]
repo = 'thinca/vim-ref'
on_map = {n = '<Plug>'}
hook_add = 'nmap [keyword]r <Plug>(ref-keyword)'
hook_source = 'let g:ref_phpmanual_path = $Home . "/.vim/phpmanual"'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['neomru.vim', 'vimfiler.vim']
hook_add = 'source ~/.vim/rc/plugins/unite_mapping.vim'
hook_source = 'source ~/.vim/rc/plugins/unite_setting.vim'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_map = {n = '<Plug>'}
on_if = "isdirectory(bufname('%'))"
hook_add = 'nnoremap <silent> [exec]f :<C-u>VimFilerBufferDir -split -simple -toggle -no-quit -winwidth=35<CR>'
hook_source = 'source ~/.vim/rc/plugins/vimfiler_setting.vim'
hook_post_source = 'source ~/.vim/rc/plugins/vimfiler_filetype_mapping.vim'

[[plugins]]
repo = 'Shougo/vimshell.vim'
on_map = {n = '<Plug>'}
hook_add = 'source ~/.vim/rc/plugins/vimshell_mapping.vim'
hook_source = '''
let g:vimshell_prompt_expr = 'getcwd()." > "'
let g:vimshell_prompt_pattern = '^\f\+ > '
'''
hook_post_source = 'source ~/.vim/rc/plugins/vimshell_filetype_mapping.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'

[[plugins]]
repo = 'Shougo/neomru.vim'
on_if = 1

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_if = 1

# [[plugins]]
# repo = 'AndrewRadev/splitjoin.vim'
# on_cmd = 'Splitjoin'
# hook_add = '''
# let g:splitjoin_split_mapping = ''
# let g:splitjoin_join_mapping = ''
# nnoremap <Leader>sj :<C-u>SplitjoinJoin<CR>
# nnoremap <Leader>ss :<C-u>SplitjoinSplit<CR>
# '''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_cmd = 'Switch'
hook_add = '''
let g:switch_mapping = ""
nnoremap [edit]s :<C-u>Switch<CR>
'''

[[plugins]]
repo = 'osyo-manga/vim-over'
on_cmd = 'OverCommandLine'
hook_add = '''
nnoremap [over] <Nop>
nmap <Space>so [over]
vnoremap [over] <Nop>
vmap <Space>so [over]

nnoremap [over]f :OverCommandLine<CR>%s/\v//g<Left><Left><Left>
nnoremap [over]w :OverCommandLine<CR>%s/\v<C-r><C-w>//g<Left><Left>
vnoremap [over]y :OverCommandLine<CR>%s/\v//g<Left><Left><Left><C-r>"<Right>

vnoremap [over]f :OverCommandLine<CR>s/\v%V%V//g<Left><Left><Left><Left><Left>
vnoremap [over]y :OverCommandLine<CR>s/\v%V%V//g<Left><Left><Left><Left><Left><C-r>"<Right><Right><Right>

let g:over_command_line_key_mappings = {
\   "\<C-b>" : "\<BS>",
\   "\<C-d>" : "\<Del>",
\   "\<C-j>" : "\<End>\<C-u>\<Down>",
\   "\<C-k>" : "\<End>\<C-u>\<Up>",
\}
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = 'Linediff'
hook_add = 'vnoremap [diff]l :Linediff<CR>'

[[plugins]]
repo = 'sjl/gundo.vim'
on_cmd = 'GundoToggle'
hook_add = 'nnoremap <Leader>u :<C-u>GundoToggle<CR>'

[[plugins]]
repo = 'OrangeT/vim-csharp'
on_ft = 'cs'

[[plugins]]
repo = 'OmniSharp/omnisharp-vim'
on_ft = 'cs'
hook_source = '''
let g:OmniSharp_host = "http://localhost:2000"
let g:OmniSharp_server_type = 'roslyn'
let g:OmniSharp_timeout = 1
let g:OmniSharp_selector_ui = 'unite'
let g:Omnisharp_stop_server = 0
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.cs = '.*[^=\);]'
let g:OmniSharp_start_without_solution = 1
let g:OmniSharp_typeLookupInPreview = 1
'''

[[plugins]]
repo = 'mhinz/vim-signify'
on_cmd = 'Signify'
on_map = {n = '<plug>(signify-'}
hook_add = '''
let g:signify_disable_by_default = 0
nmap <Leader>gj <Plug>(signify-next-hunk)zz
nmap <Leader>gk <Plug>(signify-prev-hunk)zz
nnoremap <Leader>gh :<C-u>SignifyToggleHighlight<CR>
nnoremap <Leader>gt :<C-u>SignifyToggle<CR>
'''

# [[plugins]]
# repo = 't9md/vim-quickhl'
# on_map = {n = '<Plug>(quickhl-manual-'}
# hook_add = '''
# nnoremap [highlight] <Nop>
# nmap <Leader>h [highlight]
# xnoremap [highlight] <Nop>
# xmap <Leader>h [highlight]
# nmap [highlight]t <Plug>(quickhl-manual-this)
# xmap [highlight]t <Plug>(quickhl-manual-this)
# nmap [highlight]r <Plug>(quickhl-manual-reset)
# xmap [highlight]r <Plug>(quickhl-manual-reset)
# nmap [highlight]a <Plug>(quickhl-manual-toggle)
# '''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# [[plugins]]
# repo = 'shawncplus/phpcomplete.vim'
# on_ft = 'php'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]]
repo = 'tmhedberg/matchit'
on_ft = ['html', 'smarty']

# [[plugins]]
# repo = 'mattn/ssh-add-vim'
# on_cmd = ['SshAdd']

[[plugins]]
repo = 'cohama/agit.vim'
on_cmd = ['Agit']
hook_add = '''
let g:agit_no_default_mappings = 1
let g:agit_enable_auto_show_commit = 1
nnoremap <Leader>al :<C-u>Agit<CR>
nnoremap <Leader>af :<C-u>AgitFile<CR>
'''

[[plugins]]
repo = 'haya14busa/vim-debugger'
on_cmd = ['DebugOn', 'Debugger']
hook_post_source = '''
cnoremap [debug] <Nop>
cmap j; [debug]
cnoremap [debug]s step<CR>
cnoremap [debug]g cont<CR>
cnoremap [debug]n next<CR>
cnoremap [debug]i interrupt<CR>
cnoremap [debug]q quit<CR>
cnoremap [debug]c Current<CR>
cnoremap [debug]f File<CR>
'''

[[plugins]]
repo = 'thinca/vim-prettyprint'
on_cmd = ['PP']
on_func = ['PP']

[[plugins]]
repo = 'thinca/vim-editvar'
on_cmd = ['Editvar']

# [[plugins]]
# repo = 'thinca/vim-themis'
# on_ft = 'vim'

[[plugins]]
repo = 'haya14busa/vim-operator-flashy'
on_map = {nox = '<Plug>'}
hook_add = '''
let g:operator#flashy#flash_time = 350
map y <Plug>(operator-flashy)
nmap Y <Plug>(operator-flashy)$
'''

[[plugins]]
repo = "osyo-manga/vim-marching"
on_ft = ['c', 'cpp']
hook_add = '''
let g:marching_clang_command = "C:/PROGRA~1/LLVM/bin/clang++.exe"
let g:marching_clang_command_option="-std=c++1y"
let g:marching_enable_neocomplete = 1
let g:marching_include_path = ["C:/MinGW/include"]
let g:marching_debug = 1

if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif

let g:neocomplete#force_omni_input_patterns.cpp =
    \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'

'''

[[plugins]]
repo = 't9md/vim-choosewin'
on_map = {n = '<Plug>'}
hook_add = '''
nmap m<Space> <Plug>(choosewin)
let g:choosewin_overlay_enable = 1
let g:choosewin_overlay_clear_multibyte = 1
let g:choosewin_tabline_replace = 0

let g:choosewin_color_overlay = {
      \ 'gui': ['DodgerBlue3', 'DodgerBlue3' ],
      \ 'cterm': [ 25, 25 ]
      \ }
let g:choosewin_color_overlay_current = {
      \ 'gui': ['firebrick1', 'firebrick1' ],
      \ 'cterm': [ 124, 124 ]
      \ }

let g:choosewin_label = 'ASKLWEZXCPIHFRTYUVNMQGODB'
let g:choosewin_blink_on_land      = 0
let g:choosewin_statusline_replace = 0
'''

[[plugins]]
repo = 't9md/vim-textmanip'
on_map = {nx = '<Plug>'}
hook_add = '''
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-l> <Plug>(textmanip-move-right)

xmap <M-j> <Plug>(textmanip-duplicate-down)
nmap <M-j> <Plug>(textmanip-duplicate-down)
xmap <M-k> <Plug>(textmanip-duplicate-up)
nmap <M-k> <Plug>(textmanip-duplicate-up)

xmap <CR> <Plug>(textmanip-toggle-mode)
'''

# [[plugins]]
# repo = 'osyo-manga/vim-watchdogs'
# on_ft = ['php']
# hook_source = '''
# let g:watchdogs_check_BufWritePost_enable_on_wq = 0
# let g:watchdogs_check_BufWritePost_enable = 1
#
# let g:watchdogs_check_BufWritePost_enables = {
# \   "php" : 1,
# \   "python" : 1,
# \}
#
# let g:watchdogs_check_CursorHold_enable = 0
#
# let g:watchdogs_check_CursorHold_enables = {
# \   "php" : 0,
# \   "python" : 0,
# \}
#
# let g:quickrun_config["cpp/watchdogs_checker"] = {
# \   "type" : "watchdogs_checker/g++",
# \   "cmdopt" : "-Wall",
# \}
#
# call watchdogs#setup(g:quickrun_config)
# '''

# [[plugins]]
# repo = 'cohama/vim-hier'
# on_ft = ['php']

[[plugins]]
repo = 'ternjs/tern_for_vim'
if = "has('python')"
on_ft = 'javascript'
hook_post_update = '''
if executable("npm")
    let g:dein#plugin.build = "npm install"
endif
'''
hook_add = '''
let g:tern_map_keys = 0
'''

# [[plugins]]
# repo = 'dhruvasagar/vim-table-mode'
# on_ft = 'txt'

[[plugins]]
repo = 'kannokanno/previm'
depends = 'open-browser.vim'
on_ft = 'markdown'
hook_source = '''
nnoremap <Space>ep :<C-u>PrevimOpen<CR>
'''

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'
hook_add = '''
nnoremap [exec]ci :<C-u>Capture<Space>
nnoremap [exec]cm :<C-u>Capture messages<CR>
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_add = '''
let g:vim_markdown_no_default_key_mappings = 1
'''
